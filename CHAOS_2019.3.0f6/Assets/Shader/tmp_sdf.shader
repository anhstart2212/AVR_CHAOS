Shader "TextMeshPro/Distance Field" {
	Properties {
		_FaceTex ("Face Texture", 2D) = "white" {}
		_FaceUVSpeedX ("Face UV Speed X", Range(-5, 5)) = 0
		_FaceUVSpeedY ("Face UV Speed Y", Range(-5, 5)) = 0
		_FaceColor ("Face Color", Vector) = (1,1,1,1)
		_FaceDilate ("Face Dilate", Range(-1, 1)) = 0
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_OutlineTex ("Outline Texture", 2D) = "white" {}
		_OutlineUVSpeedX ("Outline UV Speed X", Range(-5, 5)) = 0
		_OutlineUVSpeedY ("Outline UV Speed Y", Range(-5, 5)) = 0
		_OutlineWidth ("Outline Thickness", Range(0, 1)) = 0
		_OutlineSoftness ("Outline Softness", Range(0, 1)) = 0
		_Bevel ("Bevel", Range(0, 1)) = 0.5
		_BevelOffset ("Bevel Offset", Range(-0.5, 0.5)) = 0
		_BevelWidth ("Bevel Width", Range(-0.5, 0.5)) = 0
		_BevelClamp ("Bevel Clamp", Range(0, 1)) = 0
		_BevelRoundness ("Bevel Roundness", Range(0, 1)) = 0
		_LightAngle ("Light Angle", Range(0, 6.283185)) = 3.1416
		_SpecularColor ("Specular", Vector) = (1,1,1,1)
		_SpecularPower ("Specular", Range(0, 4)) = 2
		_Reflectivity ("Reflectivity", Range(5, 15)) = 10
		_Diffuse ("Diffuse", Range(0, 1)) = 0.5
		_Ambient ("Ambient", Range(1, 0)) = 0.5
		_BumpMap ("Normal map", 2D) = "bump" {}
		_BumpOutline ("Bump Outline", Range(0, 1)) = 0
		_BumpFace ("Bump Face", Range(0, 1)) = 0
		_ReflectFaceColor ("Reflection Color", Vector) = (0,0,0,1)
		_ReflectOutlineColor ("Reflection Color", Vector) = (0,0,0,1)
		_Cube ("Reflection Cubemap", Cube) = "black" {}
		_EnvMatrixRotation ("Texture Rotation", Vector) = (0,0,0,0)
		_UnderlayColor ("Border Color", Vector) = (0,0,0,0.5)
		_UnderlayOffsetX ("Border OffsetX", Range(-1, 1)) = 0
		_UnderlayOffsetY ("Border OffsetY", Range(-1, 1)) = 0
		_UnderlayDilate ("Border Dilate", Range(-1, 1)) = 0
		_UnderlaySoftness ("Border Softness", Range(0, 1)) = 0
		_GlowColor ("Color", Vector) = (0,1,0,0.5)
		_GlowOffset ("Offset", Range(-1, 1)) = 0
		_GlowInner ("Inner", Range(0, 1)) = 0.05
		_GlowOuter ("Outer", Range(0, 1)) = 0.05
		_GlowPower ("Falloff", Range(1, 0)) = 0.75
		_WeightNormal ("Weight Normal", Float) = 0
		_WeightBold ("Weight Bold", Float) = 0.5
		_ShaderFlags ("Flags", Float) = 0
		_ScaleRatioA ("Scale RatioA", Float) = 1
		_ScaleRatioB ("Scale RatioB", Float) = 1
		_ScaleRatioC ("Scale RatioC", Float) = 1
		_MainTex ("Font Atlas", 2D) = "white" {}
		_TextureWidth ("Texture Width", Float) = 512
		_TextureHeight ("Texture Height", Float) = 512
		_GradientScale ("Gradient Scale", Float) = 5
		_ScaleX ("Scale X", Float) = 1
		_ScaleY ("Scale Y", Float) = 1
		_PerspectiveFilter ("Perspective Correction", Range(0, 1)) = 0.875
		_VertexOffsetX ("Vertex OffsetX", Float) = 0
		_VertexOffsetY ("Vertex OffsetY", Float) = 0
		_MaskCoord ("Mask Coordinates", Vector) = (0,0,32767,32767)
		_ClipRect ("Clip Rect", Vector) = (-32767,-32767,32767,32767)
		_MaskSoftnessX ("Mask SoftnessX", Float) = 0
		_MaskSoftnessY ("Mask SoftnessY", Float) = 0
		_StencilComp ("Stencil Comparison", Float) = 8
		_Stencil ("Stencil ID", Float) = 0
		_StencilOp ("Stencil Operation", Float) = 0
		_StencilWriteMask ("Stencil Write Mask", Float) = 255
		_StencilReadMask ("Stencil Read Mask", Float) = 255
		_ColorMask ("Color Mask", Float) = 15
	}
	SubShader {
		Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
		Pass {
			Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
			Blend One OneMinusSrcAlpha, One OneMinusSrcAlpha
			ColorMask 0 -1
			ZClip Off
			ZWrite Off
			Cull Off
			Stencil {
				ReadMask 0
				WriteMask 0
				Comp Disabled
				Pass Keep
				Fail Keep
				ZFail Keep
			}
			Fog {
				Mode Off
			}
			GpuProgramID 9901
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float _MaskSoftnessX;
					//   float _MaskSoftnessY;
					//   float _OutlineSoftness;
					//   float4 _OutlineTex_ST;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_projection c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _EnvMatrix                c14      3
					//   _WorldSpaceCameraPos      c17      1
					//   _ScreenParams             c18      1
					//   _FaceDilate               c19      1
					//   _OutlineSoftness          c20      1
					//   _OutlineWidth             c21      1
					//   _WeightNormal             c22      1
					//   _WeightBold               c23      1
					//   _ScaleRatioA              c24      1
					//   _VertexOffsetX            c25      1
					//   _VertexOffsetY            c26      1
					//   _ClipRect                 c27      1
					//   _MaskSoftnessX            c28      1
					//   _MaskSoftnessY            c29      1
					//   _GradientScale            c30      1
					//   _ScaleX                   c31      1
					//   _ScaleY                   c32      1
					//   _PerspectiveFilter        c33      1
					//   _FaceTex_ST               c34      1
					//   _OutlineTex_ST            c35      1
					//
					
					    vs_3_0
					    def c36, 0, 1.5, 1, 0.25
					    def c37, 0.5, -2e+010, 2e+010, 0.000244140625
					    def c38, 4096, 0.001953125, 2, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    dcl_texcoord2 o4
					    dcl_texcoord3 o5.xyz
					    dcl_texcoord5 o6
					    mov r0.zw, v0
					    add r0.x, c25.x, v0.x
					    add r0.y, c26.x, v0.y
					    dp4 r5.x, c0, r0
					    dp4 r5.y, c1, r0
					    dp4 r5.z, c2, r0
					    dp4 r1.x, c8, r0
					    dp4 r1.y, c9, r0
					    dp4 r1.z, c10, r0
					    dp4 r0.z, c3, r0
					    add r1.xyz, -r1, c17
					    nrm r2.xyz, r1
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, v1.x, c11, r3
					    mad r3.xyz, v1.z, c13, r3
					    nrm r4.xyz, r3
					    dp3 r0.w, r4, r2
					    mov r2.xy, c18
					    mul r2.zw, r2.xyxy, c4.xyxy
					    add r1.w, r2.w, r2.z
					    mul r1.w, r1_abs.w, c31.x
					    rcp r3.x, r1.w
					    mul r2.xy, r2, c5
					    add r1.w, r2.y, r2.x
					    mul r1.w, r1_abs.w, c32.x
					    rcp r3.y, r1.w
					    mul r2.xy, r0.z, r3
					    mul r2.xy, r2, r2
					    add r1.w, r2.y, r2.x
					    rsq r1.w, r1.w
					    mul r2.x, c30.x, v4_abs.y
					    mul r1.w, r1.w, r2.x
					    mul r2.x, r1.w, c36.y
					    mov r2.zw, c36
					    add r2.y, r2.z, -c33.x
					    mul r2.y, r2.y, r2_abs.x
					    mad r3.z, r1.w, c36.y, -r2.y
					    mad r0.w, r0_abs.w, r3.z, r2.y
					    mad r0.w, r1.w, -c36.y, r0.w
					    abs r1.w, c7.w
					    sge r1.w, -r1.w, r1.w
					    mad r4.y, r1.w, r0.w, r2.x
					    rcp r0.w, r4.y
					    sge r1.w, c36.x, v4.y
					    mov r2.x, c22.x
					    add r2.x, -r2.x, c23.x
					    mad r1.w, r1.w, r2.x, c22.x
					    mad r1.w, r1.w, r2.w, c19.x
					    mul r1.w, r1.w, c24.x
					    mad r2.x, r1.w, -c37.x, c37.x
					    mad o3.z, r0.w, c37.x, r2.x
					    mul r0.w, r0.w, c37.x
					    mov r2.x, c24.x
					    mad r2.y, c21.x, -r2.x, r2.z
					    mad r2.x, c20.x, -r2.x, r2.y
					    mad r0.w, r2.x, c37.x, -r0.w
					    mad o3.x, r1.w, -c37.x, r0.w
					    mul r4.w, r1.w, c37.x
					    mov o3.yw, r4
					    mul r0.w, c37.w, v4.x
					    frc r1.w, r0.w
					    add r3.z, r0.w, -r1.w
					    mad r3.w, r3.z, -c38.x, v4.x
					    mul r2.xy, r3.zwzw, c38.y
					    mad o6.xy, r2, c34, c34.zwzw
					    mad o6.zw, r2.xyxy, c35.xyxy, c35
					    mov r2.y, c37.y
					    max r4, r2.y, c27
					    min r4, r4, c37.z
					    mad r0.xy, r0, c38.z, -r4
					    add o4.xy, -r4.zwzw, r0
					    mul r0.x, r2.w, c28.x
					    mul r0.y, r2.w, c29.x
					    mad r0.xy, r0.z, r3, r0
					    mov r5.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c36.w
					    dp3 o5.x, c14, r1
					    dp3 o5.y, c15, r1
					    dp3 o5.z, c16, r1
					    mov o1, v2
					    mov o2.xy, v3
					    mad o0.xy, r5.w, c255, r5
					    mov o0.zw, r5
					
					// approximately 89 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 unused_0_3;
						float _OutlineWidth;
						vec4 unused_0_5[4];
						mat4x4 _EnvMatrix;
						vec4 unused_0_7[7];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_13[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD5;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec3 u_xlat2;
					vec3 u_xlat3;
					vec3 u_xlat5;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat1.ww / u_xlat1.xy;
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat12 * 1.5;
					    u_xlat5.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat12 = u_xlat12 * 1.5 + (-u_xlat5.x);
					    u_xlat8.x = abs(u_xlat8.x) * u_xlat12 + u_xlat5.x;
					    u_xlatb12 = glstate_matrix_projection[3].w==0.0;
					    u_xlat5.x = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
					    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat12 = (-_WeightNormal) + _WeightBold;
					    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
					    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
					    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
					    u_xlat5.z = u_xlat8.x * 0.5;
					    vs_TEXCOORD1.yw = u_xlat5.xz;
					    u_xlat12 = 0.5 / u_xlat5.x;
					    u_xlat1.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat1.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.5 + (-u_xlat12);
					    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat1.x;
					    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
					    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
					    u_xlat1 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat1 = min(u_xlat1, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat1.xy);
					    vs_TEXCOORD2.xy = (-u_xlat1.zw) + u_xlat0.xy;
					    u_xlat0.xyz = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyz = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyz;
					    vs_TEXCOORD3.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyz;
					    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat8.x = floor(u_xlat0.x);
					    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float _MaskSoftnessX;
					//   float _MaskSoftnessY;
					//   float _OutlineSoftness;
					//   float4 _OutlineTex_ST;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_projection c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _EnvMatrix                c14      3
					//   _WorldSpaceCameraPos      c17      1
					//   _ScreenParams             c18      1
					//   _FaceDilate               c19      1
					//   _OutlineSoftness          c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _WeightNormal             c27      1
					//   _WeightBold               c28      1
					//   _ScaleRatioA              c29      1
					//   _ScaleRatioC              c30      1
					//   _VertexOffsetX            c31      1
					//   _VertexOffsetY            c32      1
					//   _ClipRect                 c33      1
					//   _MaskSoftnessX            c34      1
					//   _MaskSoftnessY            c35      1
					//   _TextureWidth             c36      1
					//   _TextureHeight            c37      1
					//   _GradientScale            c38      1
					//   _ScaleX                   c39      1
					//   _ScaleY                   c40      1
					//   _PerspectiveFilter        c41      1
					//   _FaceTex_ST               c42      1
					//   _OutlineTex_ST            c43      1
					//
					
					    vs_3_0
					    def c44, 0, 1.5, 1, 0.25
					    def c45, 0.5, -0.5, -2e+010, 2e+010
					    def c46, 0.000244140625, 4096, 0.001953125, 2
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    dcl_texcoord2 o4
					    dcl_texcoord3 o5.xyz
					    dcl_texcoord4 o6
					    dcl_color1 o7
					    dcl_texcoord5 o8
					    mov r0.zw, v0
					    add r0.x, c31.x, v0.x
					    add r0.y, c32.x, v0.y
					    dp4 r6.x, c0, r0
					    dp4 r6.y, c1, r0
					    dp4 r6.z, c2, r0
					    dp4 r1.x, c8, r0
					    dp4 r1.y, c9, r0
					    dp4 r1.z, c10, r0
					    dp4 r0.z, c3, r0
					    add r1.xyz, -r1, c17
					    nrm r2.xyz, r1
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, v1.x, c11, r3
					    mad r3.xyz, v1.z, c13, r3
					    nrm r4.xyz, r3
					    dp3 r0.w, r4, r2
					    mov r2.xy, c18
					    mul r2.zw, r2.xyxy, c4.xyxy
					    add r1.w, r2.w, r2.z
					    mul r1.w, r1_abs.w, c39.x
					    rcp r3.x, r1.w
					    mul r2.xy, r2, c5
					    add r1.w, r2.y, r2.x
					    mul r1.w, r1_abs.w, c40.x
					    rcp r3.y, r1.w
					    mul r2.xy, r0.z, r3
					    mul r2.xy, r2, r2
					    add r1.w, r2.y, r2.x
					    rsq r1.w, r1.w
					    mul r2.x, c38.x, v4_abs.y
					    mul r1.w, r1.w, r2.x
					    mul r2.x, r1.w, c44.y
					    mov r2.zw, c44
					    add r2.y, r2.z, -c41.x
					    mul r2.y, r2.y, r2_abs.x
					    mad r3.z, r1.w, c44.y, -r2.y
					    mad r0.w, r0_abs.w, r3.z, r2.y
					    mad r0.w, r1.w, -c44.y, r0.w
					    abs r1.w, c7.w
					    sge r1.w, -r1.w, r1.w
					    mad r4.y, r1.w, r0.w, r2.x
					    rcp r0.w, r4.y
					    sge r1.w, c44.x, v4.y
					    mov r2.x, c27.x
					    add r2.x, -r2.x, c28.x
					    mad r1.w, r1.w, r2.x, c27.x
					    mad r1.w, r1.w, r2.w, c19.x
					    mul r1.w, r1.w, c29.x
					    mad r2.x, r1.w, -c45.x, c45.x
					    mad o3.z, r0.w, c45.x, r2.x
					    mul r0.w, r0.w, c45.x
					    mov r4.x, c29.x
					    mad r2.y, c21.x, -r4.x, r2.z
					    mad r2.y, c20.x, -r4.x, r2.y
					    mad r0.w, r2.y, c45.x, -r0.w
					    mad o3.x, r1.w, -c45.x, r0.w
					    mul r4.w, r1.w, c45.x
					    mov o3.yw, r4
					    mul o7.xyz, c22.w, c22
					    mov r4.x, c30.x
					    mul r0.w, r4.x, c26.x
					    mad r0.w, r0.w, r4.y, c44.z
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, r4.y
					    mad r1.w, r2.x, r0.w, c45.y
					    mul r2.x, r4.x, c25.x
					    mul r2.x, r0.w, r2.x
					    mov o6.z, r0.w
					    mad o6.w, r2.x, -c45.x, r1.w
					    mul r0.w, c46.x, v4.x
					    frc r1.w, r0.w
					    add r3.z, r0.w, -r1.w
					    mad r3.w, r3.z, -c46.y, v4.x
					    mul r2.xy, r3.zwzw, c46.z
					    mad o8.xy, r2, c42, c42.zwzw
					    mad o8.zw, r2.xyxy, c43.xyxy, c43
					    mov r2.z, c45.z
					    max r5, r2.z, c33
					    min r5, r5, c45.w
					    mad r0.xy, r0, c46.w, -r5
					    add o4.xy, -r5.zwzw, r0
					    mul r0.x, r2.w, c34.x
					    mul r0.y, r2.w, c35.x
					    mad r0.xy, r0.z, r3, r0
					    mov r6.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c44.w
					    dp3 o5.x, c14, r1
					    dp3 o5.y, c15, r1
					    dp3 o5.z, c16, r1
					    mul r0.x, r4.x, c23.x
					    mul r0.x, -r0.x, c38.x
					    rcp r0.y, c36.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r4.x, c24.x
					    mul r0.z, -r0.z, c38.x
					    rcp r0.w, c37.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o1, v2
					    mov o2.xy, v3
					    mov o7.w, c22.w
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 110 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 unused_0_3;
						float _OutlineWidth;
						vec4 unused_0_5[4];
						mat4x4 _EnvMatrix;
						vec4 unused_0_7[3];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_13[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_20[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat1.ww / u_xlat1.xy;
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat12 * 1.5;
					    u_xlat5.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat12 = u_xlat12 * 1.5 + (-u_xlat5.x);
					    u_xlat8.x = abs(u_xlat8.x) * u_xlat12 + u_xlat5.x;
					    u_xlatb12 = glstate_matrix_projection[3].w==0.0;
					    u_xlat5.x = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
					    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat12 = (-_WeightNormal) + _WeightBold;
					    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
					    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
					    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
					    u_xlat5.z = u_xlat8.x * 0.5;
					    vs_TEXCOORD1.yw = u_xlat5.xz;
					    u_xlat12 = 0.5 / u_xlat5.x;
					    u_xlat1.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat1.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.5 + (-u_xlat12);
					    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat1.x;
					    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
					    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
					    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);
					    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;
					    u_xlat0.xyw = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyw;
					    vs_TEXCOORD3.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyw;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat0.x = u_xlat2.x * u_xlat5.x + 1.0;
					    u_xlat0.x = u_xlat5.x / u_xlat0.x;
					    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;
					    u_xlat8.x = u_xlat0.x * u_xlat2.y;
					    u_xlat1.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;
					    vs_COLOR1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    vs_COLOR1.w = _UnderlayColor.w;
					    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat8.x = floor(u_xlat0.x);
					    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "GLOW_ON" "MASK_OFF" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GradientScale;
					//   float _MaskSoftnessX;
					//   float _MaskSoftnessY;
					//   float _OutlineSoftness;
					//   float4 _OutlineTex_ST;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_projection c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _EnvMatrix                c14      3
					//   _WorldSpaceCameraPos      c17      1
					//   _ScreenParams             c18      1
					//   _FaceDilate               c19      1
					//   _OutlineSoftness          c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _GlowOffset               c27      1
					//   _GlowOuter                c28      1
					//   _WeightNormal             c29      1
					//   _WeightBold               c30      1
					//   _ScaleRatioA              c31      1
					//   _ScaleRatioB              c32      1
					//   _ScaleRatioC              c33      1
					//   _VertexOffsetX            c34      1
					//   _VertexOffsetY            c35      1
					//   _ClipRect                 c36      1
					//   _MaskSoftnessX            c37      1
					//   _MaskSoftnessY            c38      1
					//   _TextureWidth             c39      1
					//   _TextureHeight            c40      1
					//   _GradientScale            c41      1
					//   _ScaleX                   c42      1
					//   _ScaleY                   c43      1
					//   _PerspectiveFilter        c44      1
					//   _FaceTex_ST               c45      1
					//   _OutlineTex_ST            c46      1
					//
					
					    vs_3_0
					    def c47, 0, 1.5, 1, 0.25
					    def c48, 0.5, -0.5, -2e+010, 2e+010
					    def c49, 0.000244140625, 4096, 0.001953125, 2
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    dcl_texcoord2 o4
					    dcl_texcoord3 o5.xyz
					    dcl_texcoord4 o6
					    dcl_color1 o7
					    dcl_texcoord5 o8
					    mov r0.zw, v0
					    add r0.x, c34.x, v0.x
					    add r0.y, c35.x, v0.y
					    dp4 r6.x, c0, r0
					    dp4 r6.y, c1, r0
					    dp4 r6.z, c2, r0
					    dp4 r1.x, c8, r0
					    dp4 r1.y, c9, r0
					    dp4 r1.z, c10, r0
					    dp4 r0.z, c3, r0
					    add r1.xyz, -r1, c17
					    nrm r2.xyz, r1
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, v1.x, c11, r3
					    mad r3.xyz, v1.z, c13, r3
					    nrm r4.xyz, r3
					    dp3 r0.w, r4, r2
					    mov r2.xy, c18
					    mul r2.zw, r2.xyxy, c4.xyxy
					    add r1.w, r2.w, r2.z
					    mul r1.w, r1_abs.w, c42.x
					    rcp r3.x, r1.w
					    mul r2.xy, r2, c5
					    add r1.w, r2.y, r2.x
					    mul r1.w, r1_abs.w, c43.x
					    rcp r3.y, r1.w
					    mul r2.xy, r0.z, r3
					    mul r2.xy, r2, r2
					    add r1.w, r2.y, r2.x
					    rsq r1.w, r1.w
					    mul r2.x, c41.x, v4_abs.y
					    mul r1.w, r1.w, r2.x
					    mul r2.x, r1.w, c47.y
					    mov r2.zw, c47
					    add r2.y, r2.z, -c44.x
					    mul r2.y, r2.y, r2_abs.x
					    mad r3.z, r1.w, c47.y, -r2.y
					    mad r0.w, r0_abs.w, r3.z, r2.y
					    mad r0.w, r1.w, -c47.y, r0.w
					    abs r1.w, c7.w
					    sge r1.w, -r1.w, r1.w
					    mad r4.y, r1.w, r0.w, r2.x
					    rcp r0.w, r4.y
					    sge r1.w, c47.x, v4.y
					    mov r2.x, c29.x
					    add r2.x, -r2.x, c30.x
					    mad r1.w, r1.w, r2.x, c29.x
					    mad r1.w, r1.w, r2.w, c19.x
					    mul r1.w, r1.w, c31.x
					    mad r2.x, r1.w, -c48.x, c48.x
					    mad o3.z, r0.w, c48.x, r2.x
					    mul r0.w, r0.w, c48.x
					    mov r4.x, c31.x
					    mad r2.y, c21.x, -r4.x, r2.z
					    mad r2.y, c20.x, -r4.x, r2.y
					    mov r4.x, c32.x
					    mad r2.z, c27.x, -r4.x, r2.z
					    mad r2.z, c28.x, -r4.x, r2.z
					    min r2.y, r2.z, r2.y
					    mad r0.w, r2.y, c48.x, -r0.w
					    mad o3.x, r1.w, -c48.x, r0.w
					    mul r4.w, r1.w, c48.x
					    mov o3.yw, r4
					    mul o7.xyz, c22.w, c22
					    mov r4.x, c33.x
					    mul r0.w, r4.x, c26.x
					    mad r0.w, r0.w, r4.y, c47.z
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, r4.y
					    mad r1.w, r2.x, r0.w, c48.y
					    mul r2.x, r4.x, c25.x
					    mul r2.x, r0.w, r2.x
					    mov o6.z, r0.w
					    mad o6.w, r2.x, -c48.x, r1.w
					    mul r0.w, c49.x, v4.x
					    frc r1.w, r0.w
					    add r3.z, r0.w, -r1.w
					    mad r3.w, r3.z, -c49.y, v4.x
					    mul r2.xy, r3.zwzw, c49.z
					    mad o8.xy, r2, c45, c45.zwzw
					    mad o8.zw, r2.xyxy, c46.xyxy, c46
					    mov r2.z, c48.z
					    max r5, r2.z, c36
					    min r5, r5, c48.w
					    mad r0.xy, r0, c49.w, -r5
					    add o4.xy, -r5.zwzw, r0
					    mul r0.x, r2.w, c37.x
					    mul r0.y, r2.w, c38.x
					    mad r0.xy, r0.z, r3, r0
					    mov r6.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c47.w
					    dp3 o5.x, c14, r1
					    dp3 o5.y, c15, r1
					    dp3 o5.z, c16, r1
					    mul r0.x, r4.x, c23.x
					    mul r0.x, -r0.x, c41.x
					    rcp r0.y, c39.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r4.x, c24.x
					    mul r0.z, -r0.z, c41.x
					    rcp r0.w, c40.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o1, v2
					    mov o2.xy, v3
					    mov o7.w, c22.w
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 114 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "GLOW_ON" "MASK_OFF" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 unused_0_3;
						float _OutlineWidth;
						vec4 unused_0_5[4];
						mat4x4 _EnvMatrix;
						vec4 unused_0_7[3];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_13;
						float _GlowOffset;
						float _GlowOuter;
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioB;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_23[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat8.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat8.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat8.x;
					    u_xlat12 = (-_GlowOffset) * _ScaleRatioB + 1.0;
					    u_xlat12 = (-_GlowOuter) * _ScaleRatioB + u_xlat12;
					    u_xlat8.x = min(u_xlat12, u_xlat8.x);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat1.ww / u_xlat1.xy;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat1.x = inversesqrt(u_xlat9);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat5.x = u_xlat1.x * 1.5;
					    u_xlat9 = (-_PerspectiveFilter) + 1.0;
					    u_xlat9 = u_xlat9 * abs(u_xlat5.x);
					    u_xlat1.x = u_xlat1.x * 1.5 + (-u_xlat9);
					    u_xlat12 = abs(u_xlat12) * u_xlat1.x + u_xlat9;
					    u_xlatb1 = glstate_matrix_projection[3].w==0.0;
					    u_xlat5.x = (u_xlatb1) ? u_xlat12 : u_xlat5.x;
					    u_xlat12 = 0.5 / u_xlat5.x;
					    u_xlat8.x = u_xlat8.x * 0.5 + (-u_xlat12);
					    u_xlatb1 = 0.0>=in_TEXCOORD1.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat9 = (-_WeightNormal) + _WeightBold;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + _WeightNormal;
					    u_xlat1.x = u_xlat1.x * 0.25 + _FaceDilate;
					    u_xlat1.x = u_xlat1.x * _ScaleRatioA;
					    vs_TEXCOORD1.x = (-u_xlat1.x) * 0.5 + u_xlat8.x;
					    u_xlat5.z = u_xlat1.x * 0.5;
					    u_xlat8.x = (-u_xlat1.x) * 0.5 + 0.5;
					    vs_TEXCOORD1.yw = u_xlat5.xz;
					    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
					    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);
					    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;
					    u_xlat0.xyw = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyw;
					    vs_TEXCOORD3.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyw;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat0.x = u_xlat2.x * u_xlat5.x + 1.0;
					    u_xlat0.x = u_xlat5.x / u_xlat0.x;
					    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;
					    u_xlat8.x = u_xlat0.x * u_xlat2.y;
					    u_xlat1.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;
					    vs_COLOR1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    vs_COLOR1.w = _UnderlayColor.w;
					    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat8.x = floor(u_xlat0.x);
					    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GradientScale;
					//   float _MaskSoftnessX;
					//   float _MaskSoftnessY;
					//   float _OutlineSoftness;
					//   float4 _OutlineTex_ST;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_projection c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _EnvMatrix                c14      3
					//   _WorldSpaceCameraPos      c17      1
					//   _ScreenParams             c18      1
					//   _FaceDilate               c19      1
					//   _OutlineSoftness          c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _WeightNormal             c27      1
					//   _WeightBold               c28      1
					//   _ScaleRatioA              c29      1
					//   _ScaleRatioC              c30      1
					//   _VertexOffsetX            c31      1
					//   _VertexOffsetY            c32      1
					//   _ClipRect                 c33      1
					//   _MaskSoftnessX            c34      1
					//   _MaskSoftnessY            c35      1
					//   _TextureWidth             c36      1
					//   _TextureHeight            c37      1
					//   _GradientScale            c38      1
					//   _ScaleX                   c39      1
					//   _ScaleY                   c40      1
					//   _PerspectiveFilter        c41      1
					//   _FaceTex_ST               c42      1
					//   _OutlineTex_ST            c43      1
					//
					
					    vs_3_0
					    def c44, 0, 1.5, 1, 0.25
					    def c45, 0.5, -0.5, -2e+010, 2e+010
					    def c46, 0.000244140625, 4096, 0.001953125, 2
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    dcl_texcoord2 o4
					    dcl_texcoord3 o5.xyz
					    dcl_texcoord4 o6
					    dcl_color1 o7
					    dcl_texcoord5 o8
					    mov r0.zw, v0
					    add r0.x, c31.x, v0.x
					    add r0.y, c32.x, v0.y
					    dp4 r6.x, c0, r0
					    dp4 r6.y, c1, r0
					    dp4 r6.z, c2, r0
					    dp4 r1.x, c8, r0
					    dp4 r1.y, c9, r0
					    dp4 r1.z, c10, r0
					    dp4 r0.z, c3, r0
					    add r1.xyz, -r1, c17
					    nrm r2.xyz, r1
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, v1.x, c11, r3
					    mad r3.xyz, v1.z, c13, r3
					    nrm r4.xyz, r3
					    dp3 r0.w, r4, r2
					    mov r2.xy, c18
					    mul r2.zw, r2.xyxy, c4.xyxy
					    add r1.w, r2.w, r2.z
					    mul r1.w, r1_abs.w, c39.x
					    rcp r3.x, r1.w
					    mul r2.xy, r2, c5
					    add r1.w, r2.y, r2.x
					    mul r1.w, r1_abs.w, c40.x
					    rcp r3.y, r1.w
					    mul r2.xy, r0.z, r3
					    mul r2.xy, r2, r2
					    add r1.w, r2.y, r2.x
					    rsq r1.w, r1.w
					    mul r2.x, c38.x, v4_abs.y
					    mul r1.w, r1.w, r2.x
					    mul r2.x, r1.w, c44.y
					    mov r2.zw, c44
					    add r2.y, r2.z, -c41.x
					    mul r2.y, r2.y, r2_abs.x
					    mad r3.z, r1.w, c44.y, -r2.y
					    mad r0.w, r0_abs.w, r3.z, r2.y
					    mad r0.w, r1.w, -c44.y, r0.w
					    abs r1.w, c7.w
					    sge r1.w, -r1.w, r1.w
					    mad r4.y, r1.w, r0.w, r2.x
					    rcp r0.w, r4.y
					    sge r1.w, c44.x, v4.y
					    mov r2.x, c27.x
					    add r2.x, -r2.x, c28.x
					    mad r1.w, r1.w, r2.x, c27.x
					    mad r1.w, r1.w, r2.w, c19.x
					    mul r1.w, r1.w, c29.x
					    mad r2.x, r1.w, -c45.x, c45.x
					    mad o3.z, r0.w, c45.x, r2.x
					    mul r0.w, r0.w, c45.x
					    mov r4.x, c29.x
					    mad r2.y, c21.x, -r4.x, r2.z
					    mad r2.y, c20.x, -r4.x, r2.y
					    mad r0.w, r2.y, c45.x, -r0.w
					    mad o3.x, r1.w, -c45.x, r0.w
					    mul r4.w, r1.w, c45.x
					    mov o3.yw, r4
					    mul o7.xyz, c22.w, c22
					    mov r4.x, c30.x
					    mul r0.w, r4.x, c26.x
					    mad r0.w, r0.w, r4.y, c44.z
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, r4.y
					    mad r1.w, r2.x, r0.w, c45.y
					    mul r2.x, r4.x, c25.x
					    mul r2.x, r0.w, r2.x
					    mov o6.z, r0.w
					    mad o6.w, r2.x, -c45.x, r1.w
					    mul r0.w, c46.x, v4.x
					    frc r1.w, r0.w
					    add r3.z, r0.w, -r1.w
					    mad r3.w, r3.z, -c46.y, v4.x
					    mul r2.xy, r3.zwzw, c46.z
					    mad o8.xy, r2, c42, c42.zwzw
					    mad o8.zw, r2.xyxy, c43.xyxy, c43
					    mov r2.z, c45.z
					    max r5, r2.z, c33
					    min r5, r5, c45.w
					    mad r0.xy, r0, c46.w, -r5
					    add o4.xy, -r5.zwzw, r0
					    mul r0.x, r2.w, c34.x
					    mul r0.y, r2.w, c35.x
					    mad r0.xy, r0.z, r3, r0
					    mov r6.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c44.w
					    dp3 o5.x, c14, r1
					    dp3 o5.y, c15, r1
					    dp3 o5.z, c16, r1
					    mul r0.x, r4.x, c23.x
					    mul r0.x, -r0.x, c38.x
					    rcp r0.y, c36.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r4.x, c24.x
					    mul r0.z, -r0.z, c38.x
					    rcp r0.w, c37.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o1, v2
					    mov o2.xy, v3
					    mov o7.w, c22.w
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 110 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 unused_0_3;
						float _OutlineWidth;
						vec4 unused_0_5[4];
						mat4x4 _EnvMatrix;
						vec4 unused_0_7[3];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_13[2];
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_20[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					bool u_xlatb8;
					float u_xlat12;
					bool u_xlatb12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat1.xyz = u_xlat8.xxx * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat8.x = inversesqrt(u_xlat8.x);
					    u_xlat3.xyz = u_xlat8.xxx * u_xlat2.xyz;
					    u_xlat8.x = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat1.ww / u_xlat1.xy;
					    u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat12 = u_xlat12 * u_xlat1.x;
					    u_xlat1.x = u_xlat12 * 1.5;
					    u_xlat5.x = (-_PerspectiveFilter) + 1.0;
					    u_xlat5.x = u_xlat5.x * abs(u_xlat1.x);
					    u_xlat12 = u_xlat12 * 1.5 + (-u_xlat5.x);
					    u_xlat8.x = abs(u_xlat8.x) * u_xlat12 + u_xlat5.x;
					    u_xlatb12 = glstate_matrix_projection[3].w==0.0;
					    u_xlat5.x = (u_xlatb12) ? u_xlat8.x : u_xlat1.x;
					    u_xlatb8 = 0.0>=in_TEXCOORD1.y;
					    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
					    u_xlat12 = (-_WeightNormal) + _WeightBold;
					    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;
					    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;
					    u_xlat8.x = u_xlat8.x * _ScaleRatioA;
					    u_xlat5.z = u_xlat8.x * 0.5;
					    vs_TEXCOORD1.yw = u_xlat5.xz;
					    u_xlat12 = 0.5 / u_xlat5.x;
					    u_xlat1.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat1.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * 0.5 + (-u_xlat12);
					    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat1.x;
					    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;
					    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
					    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);
					    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;
					    u_xlat0.xyw = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyw;
					    vs_TEXCOORD3.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyw;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat0.x = u_xlat2.x * u_xlat5.x + 1.0;
					    u_xlat0.x = u_xlat5.x / u_xlat0.x;
					    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;
					    u_xlat8.x = u_xlat0.x * u_xlat2.y;
					    u_xlat1.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;
					    vs_COLOR1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    vs_COLOR1.w = _UnderlayColor.w;
					    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat8.x = floor(u_xlat0.x);
					    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" "GLOW_ON" }
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   row_major float4x4 _EnvMatrix;
					//   float _FaceDilate;
					//   float4 _FaceTex_ST;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GradientScale;
					//   float _MaskSoftnessX;
					//   float _MaskSoftnessY;
					//   float _OutlineSoftness;
					//   float4 _OutlineTex_ST;
					//   float _OutlineWidth;
					//   float _PerspectiveFilter;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ScaleRatioC;
					//   float _ScaleX;
					//   float _ScaleY;
					//   float4 _ScreenParams;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _UnderlayColor;
					//   float _UnderlayDilate;
					//   float _UnderlayOffsetX;
					//   float _UnderlayOffsetY;
					//   float _UnderlaySoftness;
					//   float _VertexOffsetX;
					//   float _VertexOffsetY;
					//   float _WeightBold;
					//   float _WeightNormal;
					//   float3 _WorldSpaceCameraPos;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//   row_major float4x4 unity_ObjectToWorld;
					//   row_major float4x4 unity_WorldToObject;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_projection c4       4
					//   unity_ObjectToWorld       c8       3
					//   unity_WorldToObject       c11      3
					//   _EnvMatrix                c14      3
					//   _WorldSpaceCameraPos      c17      1
					//   _ScreenParams             c18      1
					//   _FaceDilate               c19      1
					//   _OutlineSoftness          c20      1
					//   _OutlineWidth             c21      1
					//   _UnderlayColor            c22      1
					//   _UnderlayOffsetX          c23      1
					//   _UnderlayOffsetY          c24      1
					//   _UnderlayDilate           c25      1
					//   _UnderlaySoftness         c26      1
					//   _GlowOffset               c27      1
					//   _GlowOuter                c28      1
					//   _WeightNormal             c29      1
					//   _WeightBold               c30      1
					//   _ScaleRatioA              c31      1
					//   _ScaleRatioB              c32      1
					//   _ScaleRatioC              c33      1
					//   _VertexOffsetX            c34      1
					//   _VertexOffsetY            c35      1
					//   _ClipRect                 c36      1
					//   _MaskSoftnessX            c37      1
					//   _MaskSoftnessY            c38      1
					//   _TextureWidth             c39      1
					//   _TextureHeight            c40      1
					//   _GradientScale            c41      1
					//   _ScaleX                   c42      1
					//   _ScaleY                   c43      1
					//   _PerspectiveFilter        c44      1
					//   _FaceTex_ST               c45      1
					//   _OutlineTex_ST            c46      1
					//
					
					    vs_3_0
					    def c47, 0, 1.5, 1, 0.25
					    def c48, 0.5, -0.5, -2e+010, 2e+010
					    def c49, 0.000244140625, 4096, 0.001953125, 2
					    dcl_position v0
					    dcl_normal v1
					    dcl_color v2
					    dcl_texcoord v3
					    dcl_texcoord1 v4
					    dcl_position o0
					    dcl_color o1
					    dcl_texcoord o2.xy
					    dcl_texcoord1 o3
					    dcl_texcoord2 o4
					    dcl_texcoord3 o5.xyz
					    dcl_texcoord4 o6
					    dcl_color1 o7
					    dcl_texcoord5 o8
					    mov r0.zw, v0
					    add r0.x, c34.x, v0.x
					    add r0.y, c35.x, v0.y
					    dp4 r6.x, c0, r0
					    dp4 r6.y, c1, r0
					    dp4 r6.z, c2, r0
					    dp4 r1.x, c8, r0
					    dp4 r1.y, c9, r0
					    dp4 r1.z, c10, r0
					    dp4 r0.z, c3, r0
					    add r1.xyz, -r1, c17
					    nrm r2.xyz, r1
					    mul r3.xyz, c12, v1.y
					    mad r3.xyz, v1.x, c11, r3
					    mad r3.xyz, v1.z, c13, r3
					    nrm r4.xyz, r3
					    dp3 r0.w, r4, r2
					    mov r2.xy, c18
					    mul r2.zw, r2.xyxy, c4.xyxy
					    add r1.w, r2.w, r2.z
					    mul r1.w, r1_abs.w, c42.x
					    rcp r3.x, r1.w
					    mul r2.xy, r2, c5
					    add r1.w, r2.y, r2.x
					    mul r1.w, r1_abs.w, c43.x
					    rcp r3.y, r1.w
					    mul r2.xy, r0.z, r3
					    mul r2.xy, r2, r2
					    add r1.w, r2.y, r2.x
					    rsq r1.w, r1.w
					    mul r2.x, c41.x, v4_abs.y
					    mul r1.w, r1.w, r2.x
					    mul r2.x, r1.w, c47.y
					    mov r2.zw, c47
					    add r2.y, r2.z, -c44.x
					    mul r2.y, r2.y, r2_abs.x
					    mad r3.z, r1.w, c47.y, -r2.y
					    mad r0.w, r0_abs.w, r3.z, r2.y
					    mad r0.w, r1.w, -c47.y, r0.w
					    abs r1.w, c7.w
					    sge r1.w, -r1.w, r1.w
					    mad r4.y, r1.w, r0.w, r2.x
					    rcp r0.w, r4.y
					    sge r1.w, c47.x, v4.y
					    mov r2.x, c29.x
					    add r2.x, -r2.x, c30.x
					    mad r1.w, r1.w, r2.x, c29.x
					    mad r1.w, r1.w, r2.w, c19.x
					    mul r1.w, r1.w, c31.x
					    mad r2.x, r1.w, -c48.x, c48.x
					    mad o3.z, r0.w, c48.x, r2.x
					    mul r0.w, r0.w, c48.x
					    mov r4.x, c31.x
					    mad r2.y, c21.x, -r4.x, r2.z
					    mad r2.y, c20.x, -r4.x, r2.y
					    mov r4.x, c32.x
					    mad r2.z, c27.x, -r4.x, r2.z
					    mad r2.z, c28.x, -r4.x, r2.z
					    min r2.y, r2.z, r2.y
					    mad r0.w, r2.y, c48.x, -r0.w
					    mad o3.x, r1.w, -c48.x, r0.w
					    mul r4.w, r1.w, c48.x
					    mov o3.yw, r4
					    mul o7.xyz, c22.w, c22
					    mov r4.x, c33.x
					    mul r0.w, r4.x, c26.x
					    mad r0.w, r0.w, r4.y, c47.z
					    rcp r0.w, r0.w
					    mul r0.w, r0.w, r4.y
					    mad r1.w, r2.x, r0.w, c48.y
					    mul r2.x, r4.x, c25.x
					    mul r2.x, r0.w, r2.x
					    mov o6.z, r0.w
					    mad o6.w, r2.x, -c48.x, r1.w
					    mul r0.w, c49.x, v4.x
					    frc r1.w, r0.w
					    add r3.z, r0.w, -r1.w
					    mad r3.w, r3.z, -c49.y, v4.x
					    mul r2.xy, r3.zwzw, c49.z
					    mad o8.xy, r2, c45, c45.zwzw
					    mad o8.zw, r2.xyxy, c46.xyxy, c46
					    mov r2.z, c48.z
					    max r5, r2.z, c36
					    min r5, r5, c48.w
					    mad r0.xy, r0, c49.w, -r5
					    add o4.xy, -r5.zwzw, r0
					    mul r0.x, r2.w, c37.x
					    mul r0.y, r2.w, c38.x
					    mad r0.xy, r0.z, r3, r0
					    mov r6.w, r0.z
					    rcp r0.z, r0.x
					    rcp r0.w, r0.y
					    mul o4.zw, r0, c47.w
					    dp3 o5.x, c14, r1
					    dp3 o5.y, c15, r1
					    dp3 o5.z, c16, r1
					    mul r0.x, r4.x, c23.x
					    mul r0.x, -r0.x, c41.x
					    rcp r0.y, c39.x
					    mul r0.x, r0.y, r0.x
					    mul r0.z, r4.x, c24.x
					    mul r0.z, -r0.z, c41.x
					    rcp r0.w, c40.x
					    mul r0.y, r0.w, r0.z
					    add o6.xy, r0, v3
					    mov o1, v2
					    mov o2.xy, v3
					    mov o7.w, c22.w
					    mad o0.xy, r6.w, c255, r6
					    mov o0.zw, r6
					
					// approximately 114 instruction slots used"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" "GLOW_ON" }
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[4];
						float _FaceDilate;
						float _OutlineSoftness;
						vec4 unused_0_3;
						float _OutlineWidth;
						vec4 unused_0_5[4];
						mat4x4 _EnvMatrix;
						vec4 unused_0_7[3];
						vec4 _UnderlayColor;
						float _UnderlayOffsetX;
						float _UnderlayOffsetY;
						float _UnderlayDilate;
						float _UnderlaySoftness;
						vec4 unused_0_13;
						float _GlowOffset;
						float _GlowOuter;
						float _WeightNormal;
						float _WeightBold;
						float _ScaleRatioA;
						float _ScaleRatioB;
						float _ScaleRatioC;
						float _VertexOffsetX;
						float _VertexOffsetY;
						vec4 unused_0_23[2];
						vec4 _ClipRect;
						float _MaskSoftnessX;
						float _MaskSoftnessY;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						float _ScaleX;
						float _ScaleY;
						float _PerspectiveFilter;
						vec4 _FaceTex_ST;
						vec4 _OutlineTex_ST;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[4];
						vec3 _WorldSpaceCameraPos;
						vec4 unused_1_2;
						vec4 _ScreenParams;
						vec4 unused_1_4[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[8];
						mat4x4 unity_ObjectToWorld;
						mat4x4 unity_WorldToObject;
						vec4 unused_2_4[2];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					in  vec4 in_COLOR0;
					in  vec2 in_TEXCOORD0;
					in  vec2 in_TEXCOORD1;
					out vec4 vs_COLOR0;
					out vec2 vs_TEXCOORD0;
					out vec4 vs_TEXCOORD1;
					out vec4 vs_TEXCOORD2;
					out vec3 vs_TEXCOORD3;
					out vec4 vs_TEXCOORD4;
					out vec4 vs_COLOR1;
					out vec4 vs_TEXCOORD5;
					vec4 u_xlat0;
					vec4 u_xlat1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat3;
					float u_xlat4;
					vec3 u_xlat5;
					vec2 u_xlat8;
					float u_xlat9;
					float u_xlat12;
					void main()
					{
					    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);
					    u_xlat1 = u_xlat0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * u_xlat0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    gl_Position = u_xlat1;
					    vs_COLOR0 = in_COLOR0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlat8.x = (-_OutlineWidth) * _ScaleRatioA + 1.0;
					    u_xlat8.x = (-_OutlineSoftness) * _ScaleRatioA + u_xlat8.x;
					    u_xlat12 = (-_GlowOffset) * _ScaleRatioB + 1.0;
					    u_xlat12 = (-_GlowOuter) * _ScaleRatioB + u_xlat12;
					    u_xlat8.x = min(u_xlat12, u_xlat8.x);
					    u_xlat1.x = dot(in_NORMAL0.xyz, unity_WorldToObject[0].xyz);
					    u_xlat1.y = dot(in_NORMAL0.xyz, unity_WorldToObject[1].xyz);
					    u_xlat1.z = dot(in_NORMAL0.xyz, unity_WorldToObject[2].xyz);
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz;
					    u_xlat2.xyz = u_xlat0.yyy * unity_ObjectToWorld[1].xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat2.xyz;
					    u_xlat2.xyz = unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat2.xyz;
					    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
					    u_xlat12 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat12 = inversesqrt(u_xlat12);
					    u_xlat3.xyz = vec3(u_xlat12) * u_xlat2.xyz;
					    u_xlat12 = dot(u_xlat1.xyz, u_xlat3.xyz);
					    u_xlat1.xy = _ScreenParams.yy * glstate_matrix_projection[1].xy;
					    u_xlat1.xy = glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;
					    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);
					    u_xlat1.xy = u_xlat1.ww / u_xlat1.xy;
					    u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
					    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;
					    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat1.xy;
					    u_xlat1.x = inversesqrt(u_xlat9);
					    u_xlat5.x = abs(in_TEXCOORD1.y) * _GradientScale;
					    u_xlat1.x = u_xlat1.x * u_xlat5.x;
					    u_xlat5.x = u_xlat1.x * 1.5;
					    u_xlat9 = (-_PerspectiveFilter) + 1.0;
					    u_xlat9 = u_xlat9 * abs(u_xlat5.x);
					    u_xlat1.x = u_xlat1.x * 1.5 + (-u_xlat9);
					    u_xlat12 = abs(u_xlat12) * u_xlat1.x + u_xlat9;
					    u_xlatb1 = glstate_matrix_projection[3].w==0.0;
					    u_xlat5.x = (u_xlatb1) ? u_xlat12 : u_xlat5.x;
					    u_xlat12 = 0.5 / u_xlat5.x;
					    u_xlat8.x = u_xlat8.x * 0.5 + (-u_xlat12);
					    u_xlatb1 = 0.0>=in_TEXCOORD1.y;
					    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
					    u_xlat9 = (-_WeightNormal) + _WeightBold;
					    u_xlat1.x = u_xlat1.x * u_xlat9 + _WeightNormal;
					    u_xlat1.x = u_xlat1.x * 0.25 + _FaceDilate;
					    u_xlat1.x = u_xlat1.x * _ScaleRatioA;
					    vs_TEXCOORD1.x = (-u_xlat1.x) * 0.5 + u_xlat8.x;
					    u_xlat5.z = u_xlat1.x * 0.5;
					    u_xlat8.x = (-u_xlat1.x) * 0.5 + 0.5;
					    vs_TEXCOORD1.yw = u_xlat5.xz;
					    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;
					    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));
					    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));
					    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);
					    vs_TEXCOORD2.xy = (-u_xlat3.zw) + u_xlat0.xy;
					    u_xlat0.xyw = u_xlat2.yyy * _EnvMatrix[1].xyz;
					    u_xlat0.xyw = _EnvMatrix[0].xyz * u_xlat2.xxx + u_xlat0.xyw;
					    vs_TEXCOORD3.xyz = _EnvMatrix[2].xyz * u_xlat2.zzz + u_xlat0.xyw;
					    u_xlat2 = vec4(_UnderlaySoftness, _UnderlayDilate, _UnderlayOffsetX, _UnderlayOffsetY) * vec4(vec4(_ScaleRatioC, _ScaleRatioC, _ScaleRatioC, _ScaleRatioC));
					    u_xlat0.x = u_xlat2.x * u_xlat5.x + 1.0;
					    u_xlat0.x = u_xlat5.x / u_xlat0.x;
					    u_xlat4 = u_xlat8.x * u_xlat0.x + -0.5;
					    u_xlat8.x = u_xlat0.x * u_xlat2.y;
					    u_xlat1.xy = (-u_xlat2.zw) * vec2(_GradientScale);
					    u_xlat1.xy = u_xlat1.xy / vec2(_TextureWidth, _TextureHeight);
					    vs_TEXCOORD4.xy = u_xlat1.xy + in_TEXCOORD0.xy;
					    vs_TEXCOORD4.z = u_xlat0.x;
					    vs_TEXCOORD4.w = (-u_xlat8.x) * 0.5 + u_xlat4;
					    vs_COLOR1.xyz = _UnderlayColor.www * _UnderlayColor.xyz;
					    vs_COLOR1.w = _UnderlayColor.w;
					    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;
					    u_xlat8.x = floor(u_xlat0.x);
					    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;
					    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);
					    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;
					    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float4 _Time;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _Time            c0       1
					//   _FaceUVSpeedX    c1       1
					//   _FaceUVSpeedY    c2       1
					//   _FaceColor       c3       1
					//   _OutlineSoftness c4       1
					//   _OutlineUVSpeedX c5       1
					//   _OutlineUVSpeedY c6       1
					//   _OutlineColor    c7       1
					//   _OutlineWidth    c8       1
					//   _ScaleRatioA     c9       1
					//   _ClipRect        c10      1
					//   _FaceTex         s0       1
					//   _OutlineTex      s1       1
					//   _MainTex         s2       1
					//
					
					    ps_3_0
					    def c11, 0.5, 1, 0, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.xyz
					    dcl_texcoord2 v3
					    dcl_texcoord5 v4
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    texld r0, v1, s2
					    add r1, r0.w, -v2.x
					    add r0.x, -r0.w, v2.z
					    texkill r1
					    mov r1.x, c9.x
					    mul r0.y, r1.x, c8.x
					    mul_pp r0.z, r0.y, v2.y
					    mad r0.y, r0.y, -v2.y, c11.y
					    rsq r0.w, r0.z
					    mul_pp r0.z, r0.z, c11.x
					    rcp_pp r0.w, r0.w
					    cmp_pp r0.y, r0.y, r0.w, c11.y
					    mad_sat_pp r0.w, r0.x, v2.y, r0.z
					    mad_pp r0.x, r0.x, v2.y, -r0.z
					    mul_pp r0.y, r0.y, r0.w
					    mov r1.y, c0.y
					    mul r2.x, r1.y, c1.x
					    mul r2.y, r1.y, c2.x
					    add r0.zw, r2.xyxy, v4.xyxy
					    texld r2, r0.zwzw, s0
					    mul_pp r3.xyz, c3, v0
					    mul_pp r2.xyz, r2, r3
					    mul_pp r3.w, r2.w, c3.w
					    mul_pp r3.xyz, r2, r3.w
					    mul r2.x, r1.y, c5.x
					    mul r2.y, r1.y, c6.x
					    add r0.zw, r2.xyxy, v4
					    texld r2, r0.zwzw, s1
					    mul_pp r2, r2, c7
					    mul_pp r2.xyz, r2.w, r2
					    lrp_pp r4, r0.y, r2, r3
					    mul r0.y, r1.x, c4.x
					    mul_pp r0.z, r0.y, v2.y
					    mad_pp r0.y, r0.y, v2.y, c11.y
					    rcp r0.y, r0.y
					    mad_pp r0.x, r0.z, c11.x, r0.x
					    mul_sat_pp r0.x, r0.y, r0.x
					    add_pp r0.x, -r0.x, c11.y
					    mul_pp r0, r0.x, r4
					    add r1.xy, -c10, c10.zwzw
					    add r1.xy, r1, -v3_abs
					    mul_sat_pp r1.xy, r1, v3.zwzw
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r0, r0, r1.x
					    mul_pp oC0, r0, v0.w
					
					// approximately 45 instruction slots used (3 texture, 42 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_9[15];
						float _ScaleRatioA;
						vec4 unused_0_11[3];
						vec4 _ClipRect;
						vec4 unused_0_13[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					float u_xlat4;
					vec2 u_xlat8;
					float u_xlat12;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat0.x = u_xlat10_0.w + (-vs_TEXCOORD1.x);
					    u_xlat4 = (-u_xlat10_0.w) + vs_TEXCOORD1.z;
					    u_xlatb0 = u_xlat0.x<0.0;
					    if(((int(u_xlatb0) * int(0xffffffffu)))!=0){discard;}
					    u_xlat0.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat0.x = u_xlat0.x * vs_TEXCOORD1.y;
					    u_xlat8.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = u_xlat0.x * 0.5;
					    u_xlat8.x = sqrt(u_xlat8.x);
					    u_xlat12 = u_xlat4 * vs_TEXCOORD1.y + u_xlat0.x;
					    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
					    u_xlat0.x = u_xlat4 * vs_TEXCOORD1.y + (-u_xlat0.x);
					    u_xlat4 = u_xlat8.x * u_xlat12;
					    u_xlat8.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat8.xy);
					    u_xlat1 = u_xlat10_1 * _OutlineColor;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat2.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
					    u_xlat8.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
					    u_xlat10_3 = texture(_FaceTex, u_xlat8.xy);
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;
					    u_xlat3.w = u_xlat10_3.w * _FaceColor.w;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat1 = u_xlat1 + (-u_xlat3);
					    u_xlat1 = vec4(u_xlat4) * u_xlat1 + u_xlat3;
					    u_xlat4 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat8.x = u_xlat4 * vs_TEXCOORD1.y;
					    u_xlat4 = u_xlat4 * vs_TEXCOORD1.y + 1.0;
					    u_xlat0.x = u_xlat8.x * 0.5 + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x / u_xlat4;
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat0 = u_xlat0.xxxx * u_xlat1;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float4 _Time;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _Time            c0       1
					//   _FaceUVSpeedX    c1       1
					//   _FaceUVSpeedY    c2       1
					//   _FaceColor       c3       1
					//   _OutlineSoftness c4       1
					//   _OutlineUVSpeedX c5       1
					//   _OutlineUVSpeedY c6       1
					//   _OutlineColor    c7       1
					//   _OutlineWidth    c8       1
					//   _ScaleRatioA     c9       1
					//   _ClipRect        c10      1
					//   _FaceTex         s0       1
					//   _OutlineTex      s1       1
					//   _MainTex         s2       1
					//
					
					    ps_3_0
					    def c11, 0.5, 1, 0, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.yz
					    dcl_texcoord2 v3
					    dcl_texcoord4 v4
					    dcl_color1 v5
					    dcl_texcoord5 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.y, c0.y
					    mul r1.x, r0.y, c1.x
					    mul r1.y, r0.y, c2.x
					    add r0.xz, r1.xyyw, v6.xyyw
					    texld r1, r0.xzzw, s0
					    mul_pp r0.xzw, c3.xyyz, v0.xyyz
					    mul_pp r0.xzw, r1.xyyz, r0
					    mul_pp r1.w, r1.w, c3.w
					    mul_pp r1.xyz, r0.xzww, r1.w
					    mov r0.x, c9.x
					    mul r0.z, r0.x, c8.x
					    mul_pp r0.w, r0.z, v2.y
					    mad r0.z, r0.z, -v2.y, c11.y
					    rsq r2.x, r0.w
					    mul_pp r0.w, r0.w, c11.x
					    rcp_pp r2.x, r2.x
					    cmp_pp r0.z, r0.z, r2.x, c11.y
					    texld r2, v1, s2
					    add r2.x, -r2.w, v2.z
					    mad_sat_pp r2.y, r2.x, v2.y, r0.w
					    mad_pp r0.w, r2.x, v2.y, -r0.w
					    mul_pp r0.z, r0.z, r2.y
					    mul r2.x, r0.y, c5.x
					    mul r2.y, r0.y, c6.x
					    add r2.xy, r2, v6.zwzw
					    texld r2, r2, s1
					    mul_pp r2, r2, c7
					    mul_pp r2.xyz, r2.w, r2
					    lrp_pp r3, r0.z, r2, r1
					    mul r0.x, r0.x, c4.x
					    mul_pp r0.y, r0.x, v2.y
					    mad_pp r0.x, r0.x, v2.y, c11.y
					    rcp r0.x, r0.x
					    mad_pp r0.y, r0.y, c11.x, r0.w
					    mul_sat_pp r0.x, r0.x, r0.y
					    add_pp r0.x, -r0.x, c11.y
					    mul_pp r1, r0.x, r3
					    mad r0.x, r3.w, -r0.x, c11.y
					    texld r2, v4, s2
					    mad_sat r0.y, r2.w, v4.z, -v4.w
					    mul r2, r0.y, v5
					    mad_pp r0, r2, r0.x, r1
					    add r1.xy, -c10, c10.zwzw
					    add r1.xy, r1, -v3_abs
					    mul_sat_pp r1.xy, r1, v3.zwzw
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r0, r0, r1.x
					    mul_pp oC0, r0, v0.w
					
					// approximately 48 instruction slots used (4 texture, 44 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_9[15];
						float _ScaleRatioA;
						vec4 unused_0_11[3];
						vec4 _ClipRect;
						vec4 unused_0_13[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat10_3;
					float u_xlat4;
					float u_xlat5;
					float u_xlat9;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
					    u_xlat10_0 = texture(_OutlineTex, u_xlat0.xy);
					    u_xlat0 = u_xlat10_0 * _OutlineColor;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
					    u_xlat2.w = u_xlat10_2.w * _FaceColor.w;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    u_xlat1.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat1.x = u_xlat1.x * vs_TEXCOORD1.y;
					    u_xlat5 = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat5 = sqrt(u_xlat5);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat9 = (-u_xlat10_3.w) + vs_TEXCOORD1.z;
					    u_xlat13 = u_xlat9 * vs_TEXCOORD1.y + u_xlat1.x;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = u_xlat9 * vs_TEXCOORD1.y + (-u_xlat1.x);
					    u_xlat5 = u_xlat5 * u_xlat13;
					    u_xlat0 = vec4(u_xlat5) * u_xlat0 + u_xlat2;
					    u_xlat5 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat9 = u_xlat5 * vs_TEXCOORD1.y;
					    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y + 1.0;
					    u_xlat1.x = u_xlat9 * 0.5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat5;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat0.x = (-u_xlat0.w) * u_xlat1.x + 1.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat4 = u_xlat10_1.w * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat1 = vec4(u_xlat4) * vs_COLOR1;
					    u_xlat0 = u_xlat1 * u_xlat0.xxxx + u_xlat2;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "GLOW_ON" "MASK_OFF" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _ClipRect;
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float4 _Time;
					//
					//
					// Registers:
					//
					//   Name             Reg   Size
					//   ---------------- ----- ----
					//   _Time            c0       1
					//   _FaceUVSpeedX    c1       1
					//   _FaceUVSpeedY    c2       1
					//   _FaceColor       c3       1
					//   _OutlineSoftness c4       1
					//   _OutlineUVSpeedX c5       1
					//   _OutlineUVSpeedY c6       1
					//   _OutlineColor    c7       1
					//   _OutlineWidth    c8       1
					//   _GlowColor       c9       1
					//   _GlowOffset      c10      1
					//   _GlowOuter       c11      1
					//   _GlowInner       c12      1
					//   _GlowPower       c13      1
					//   _ScaleRatioA     c14      1
					//   _ScaleRatioB     c15      1
					//   _ClipRect        c16      1
					//   _FaceTex         s0       1
					//   _OutlineTex      s1       1
					//   _MainTex         s2       1
					//
					
					    ps_3_0
					    def c17, 0.5, 1, 0, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.yz
					    dcl_texcoord2 v3
					    dcl_texcoord4 v4
					    dcl_color1 v5
					    dcl_texcoord5 v6
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    mov r0.y, c0.y
					    mul r1.x, r0.y, c1.x
					    mul r1.y, r0.y, c2.x
					    add r0.xz, r1.xyyw, v6.xyyw
					    texld r1, r0.xzzw, s0
					    mul_pp r0.xzw, c3.xyyz, v0.xyyz
					    mul_pp r0.xzw, r1.xyyz, r0
					    mul_pp r1.w, r1.w, c3.w
					    mul_pp r1.xyz, r0.xzww, r1.w
					    mul r2.x, r0.y, c5.x
					    mul r2.y, r0.y, c6.x
					    add r0.xy, r2, v6.zwzw
					    texld r0, r0, s1
					    mul_pp r0, r0, c7
					    mul_pp r0.xyz, r0.w, r0
					    mov r2.x, c14.x
					    mul r2.y, r2.x, c8.x
					    mul_pp r2.z, r2.y, v2.y
					    mad r2.y, r2.y, -v2.y, c17.y
					    rsq r2.w, r2.z
					    mul_pp r2.z, r2.z, c17.x
					    rcp_pp r2.w, r2.w
					    cmp_pp r2.y, r2.y, r2.w, c17.y
					    texld r3, v1, s2
					    add r2.w, -r3.w, v2.z
					    mad_sat_pp r3.x, r2.w, v2.y, r2.z
					    mad_pp r2.z, r2.w, v2.y, -r2.z
					    mul_pp r2.w, r2.w, v2.y
					    mul_pp r2.y, r2.y, r3.x
					    lrp_pp r3, r2.y, r0, r1
					    mul r0.x, r2.x, c4.x
					    mul_pp r0.y, r0.x, v2.y
					    mad_pp r0.x, r0.x, v2.y, c17.y
					    rcp r0.x, r0.x
					    mad_pp r0.y, r0.y, c17.x, r2.z
					    mul_sat_pp r0.x, r0.x, r0.y
					    add_pp r0.x, -r0.x, c17.y
					    mul_pp r1, r0.x, r3
					    mad r0.x, r3.w, -r0.x, c17.y
					    texld r3, v4, s2
					    mad_sat r0.y, r3.w, v4.z, -v4.w
					    mul r3, r0.y, v5
					    mad_pp r0, r3, r0.x, r1
					    mov r1.x, c15.x
					    mul r1.y, r1.x, c10.x
					    mul r1.y, r1.y, c17.x
					    mad r1.y, r1.y, -v2.y, r2.w
					    mul r1.x, r1.x, c11.x
					    cmp r1.x, r1.y, r1.x, c12.x
					    mul r1.x, r1.x, c17.x
					    mad r1.z, r1.x, v2.y, c17.y
					    rcp r1.z, r1.z
					    mul r1.y, r1.z, r1.y
					    abs_sat r1.y, r1.y
					    pow r2.x, r1.y, c13.x
					    add r1.y, -r2.x, c17.y
					    mul r1.z, r1.x, v2.y
					    mad r1.x, r1.x, -v2.y, c17.y
					    rsq r1.z, r1.z
					    rcp r1.z, r1.z
					    cmp r1.x, r1.x, r1.z, c17.y
					    mul r1.x, r1.x, r1.y
					    mov r1.z, c17.z
					    dp2add_sat r1.x, c9.w, r1.x, r1.z
					    mad_pp r0.xyz, c9, r1.x, r0
					    add r1.xy, -c16, c16.zwzw
					    add r1.xy, r1, -v3_abs
					    mul_sat_pp r1.xy, r1, v3.zwzw
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r0, r0, r1.x
					    mul_pp oC0, r0, v0.w
					
					// approximately 74 instruction slots used (4 texture, 70 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "GLOW_ON" "MASK_OFF" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						vec4 unused_0_9[13];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_17[2];
						vec4 _ClipRect;
						vec4 unused_0_19[4];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec3 u_xlat1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					float u_xlat4;
					vec2 u_xlat5;
					bool u_xlatb5;
					vec2 u_xlat9;
					float u_xlat13;
					void main()
					{
					    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
					    u_xlat10_0 = texture(_OutlineTex, u_xlat0.xy);
					    u_xlat0 = u_xlat10_0 * _OutlineColor;
					    u_xlat0.xyz = u_xlat0.www * u_xlat0.xyz;
					    u_xlat1.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
					    u_xlat2.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
					    u_xlat10_2 = texture(_FaceTex, u_xlat2.xy);
					    u_xlat1.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
					    u_xlat2.w = u_xlat10_2.w * _FaceColor.w;
					    u_xlat2.xyz = u_xlat1.xyz * u_xlat2.www;
					    u_xlat0 = u_xlat0 + (-u_xlat2);
					    u_xlat1.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat1.x = u_xlat1.x * vs_TEXCOORD1.y;
					    u_xlat5.x = min(u_xlat1.x, 1.0);
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat5.y = (-u_xlat10_3.w) + vs_TEXCOORD1.z;
					    u_xlat13 = u_xlat5.y * vs_TEXCOORD1.y + u_xlat1.x;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat1.x = u_xlat5.y * vs_TEXCOORD1.y + (-u_xlat1.x);
					    u_xlat5.x = u_xlat5.x * u_xlat13;
					    u_xlat0 = u_xlat5.xxxx * u_xlat0 + u_xlat2;
					    u_xlat5.x = _OutlineSoftness * _ScaleRatioA;
					    u_xlat9.xy = u_xlat5.yx * vs_TEXCOORD1.yy;
					    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y + 1.0;
					    u_xlat1.x = u_xlat9.y * 0.5 + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x / u_xlat5.x;
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat2 = u_xlat0 * u_xlat1.xxxx;
					    u_xlat0.x = (-u_xlat0.w) * u_xlat1.x + 1.0;
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat4 = u_xlat10_3.w * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);
					    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
					    u_xlat3 = vec4(u_xlat4) * vs_COLOR1;
					    u_xlat0 = u_xlat3 * u_xlat0.xxxx + u_xlat2;
					    u_xlat1.x = _GlowOffset * _ScaleRatioB;
					    u_xlat1.x = u_xlat1.x * 0.5;
					    u_xlat1.x = (-u_xlat1.x) * vs_TEXCOORD1.y + u_xlat9.x;
					    u_xlatb5 = u_xlat1.x>=0.0;
					    u_xlat5.x = u_xlatb5 ? 1.0 : float(0.0);
					    u_xlat9.x = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat5.x = u_xlat5.x * u_xlat9.x + _GlowInner;
					    u_xlat5.x = u_xlat5.x * 0.5;
					    u_xlat9.x = u_xlat5.x * vs_TEXCOORD1.y + 1.0;
					    u_xlat5.x = u_xlat5.x * vs_TEXCOORD1.y;
					    u_xlat5.x = min(u_xlat5.x, 1.0);
					    u_xlat5.x = sqrt(u_xlat5.x);
					    u_xlat1.x = u_xlat1.x / u_xlat9.x;
					    u_xlat1.x = min(abs(u_xlat1.x), 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _GlowPower;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat5.x * u_xlat1.x;
					    u_xlat1.x = dot(_GlowColor.ww, u_xlat1.xx);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = _GlowColor.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Ambient;
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _ClipRect;
					//   samplerCUBE _Cube;
					//   float _Diffuse;
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float _GradientScale;
					//   float _LightAngle;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _Reflectivity;
					//   float _ScaleRatioA;
					//   float _ShaderFlags;
					//   float4 _SpecularColor;
					//   float _SpecularPower;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _FaceUVSpeedX        c1       1
					//   _FaceUVSpeedY        c2       1
					//   _FaceColor           c3       1
					//   _OutlineSoftness     c4       1
					//   _OutlineUVSpeedX     c5       1
					//   _OutlineUVSpeedY     c6       1
					//   _OutlineColor        c7       1
					//   _OutlineWidth        c8       1
					//   _Bevel               c9       1
					//   _BevelOffset         c10      1
					//   _BevelWidth          c11      1
					//   _BevelClamp          c12      1
					//   _BevelRoundness      c13      1
					//   _BumpOutline         c14      1
					//   _BumpFace            c15      1
					//   _ReflectFaceColor    c16      1
					//   _ReflectOutlineColor c17      1
					//   _SpecularColor       c18      1
					//   _LightAngle          c19      1
					//   _SpecularPower       c20      1
					//   _Reflectivity        c21      1
					//   _Diffuse             c22      1
					//   _Ambient             c23      1
					//   _ShaderFlags         c24      1
					//   _ScaleRatioA         c25      1
					//   _ClipRect            c26      1
					//   _TextureWidth        c27      1
					//   _TextureHeight       c28      1
					//   _GradientScale       c29      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c30, 0.00999999978, 2, -1, -0.00138883968
					    def c31, 0.5, 1, 0, -0.5
					    def c32, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c33, -2.52398507e-007, 2.47609005e-005, 0.0416666418, 0
					    def c34, 0.159154937, 0.5, 0, 0
					    def c35, 1, 0, -1, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.yzw
					    dcl_texcoord2 v3
					    dcl_texcoord3 v4.xyz
					    dcl_texcoord4 v5
					    dcl_color1 v6
					    dcl_texcoord5 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.x, c10.x, v2.w
					    rcp r0.y, c27.x
					    mul r1.x, r0.y, c31.x
					    rcp r0.y, c28.x
					    mul r1.w, r0.y, c31.x
					    mov r1.yz, c31.z
					    add r2, -r1, v1.xyxy
					    add r1, r1, v1.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    add r0, r0, c31.w
					    mov r1.x, c8.x
					    add r1.y, r1.x, c11.x
					    max r2.x, c30.x, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c9.x
					    mul r1.z, r1.z, c29.x
					    mul r1.z, r1.z, -c30.y
					    mad_sat r0, r0, r1.y, c31.x
					    mad r2, r0, c30.y, c30.z
					    add r2, -r2_abs, c31.y
					    mov r3.xy, c31
					    mul r1.y, r3.x, c24.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c24.x, r1.y, -r1.y
					    add r1.y, r1.y, c31.w
					    cmp r0, r1.y, r2, r0
					    mad r2, r0, c32.x, c32.y
					    frc r2, r2
					    mad r2, r2, c32.z, c32.w
					    mul r2, r2, r2
					    mad r4, r2, c33.x, c33.y
					    mad r4, r2, r4, c30.w
					    mad r4, r2, r4, c33.z
					    mad r4, r2, r4, c31.w
					    mad r2, r2, r4, c31.y
					    lrp r4, c13.x, r2, r0
					    add r0.x, r3.y, -c12.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c31.y
					    dp2add r1.y, r0.wyzw, r0.wyzw, c31.z
					    mul r2.xyz, r0.wyww, c31.yyzw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov_pp r0.z, c31.y
					    dp2add r0.y, r0.zxzw, r0.zxzw, c31.z
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c31
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c0.y
					    mul r2.x, r1.y, c1.x
					    mul r2.y, r1.y, c2.x
					    add r1.zw, r2.xyxy, v7.xyxy
					    texld_pp r2, r1.zwzw, s2
					    texld r4, r1.zwzw, s0
					    mad_pp r2.xy, r2.wyzw, c30.y, c30.z
					    dp2add_sat_pp r0.w, r2, r2, c31.z
					    add_pp r0.w, -r0.w, c31.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r2.z, r0.w
					    mov r3.x, c15.x
					    add r0.w, -r3.x, c14.x
					    texld r5, v1, s4
					    add r1.z, -r5.w, v2.z
					    mul r1.x, r1.x, c25.x
					    mul_pp r1.w, r1.x, v2.y
					    mad r1.x, r1.x, -v2.y, c31.y
					    mul_pp r2.w, r1.w, c31.x
					    rsq r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.x, r1.x, r1.w, c31.y
					    mad_sat_pp r1.w, r1.z, v2.y, r2.w
					    mad_pp r1.z, r1.z, v2.y, -r2.w
					    mad r0.w, r1.w, r0.w, c15.x
					    mad r0.xyz, r2, -r0.w, r0
					    nrm r2.xyz, r0
					    dp3 r0.x, v4, -r2
					    add r0.x, r0.x, r0.x
					    mad r0.xyz, r2, r0.x, v4
					    texld_pp r0, r0, s3
					    mov r5.xyz, c16
					    add r3.xzw, -r5.xyyz, c17.xyyz
					    mad r3.xzw, r1.w, r3, c16.xyyz
					    mul_pp r0.w, r1.x, r1.w
					    mul r0.xyz, r0, r3.xzww
					    mul_pp r3.xzw, c3.xyyz, v0.xyyz
					    mul_pp r3.xzw, r4.xyyz, r3
					    mul_pp r4.w, r4.w, c3.w
					    mul_pp r4.xyz, r3.xzww, r4.w
					    mul r5.x, r1.y, c5.x
					    mul r5.y, r1.y, c6.x
					    add r1.xy, r5, v7.zwzw
					    texld r5, r1, s1
					    mul_pp r5, r5, c7
					    mul_pp r5.xyz, r5.w, r5
					    lrp_pp r6, r0.w, r5, r4
					    mov r1.x, c25.x
					    mul r0.w, r1.x, c4.x
					    mul_pp r1.x, r0.w, v2.y
					    mad_pp r0.w, r0.w, v2.y, c31.y
					    rcp r0.w, r0.w
					    mad_pp r1.x, r1.x, c31.x, r1.z
					    mul_sat_pp r0.w, r0.w, r1.x
					    add_pp r0.w, -r0.w, c31.y
					    mul_pp r1, r0.w, r6
					    mad r0.w, r6.w, -r0.w, c31.y
					    mul r0.xyz, r0, r1.w
					    mov r4.xy, c34
					    mad r2.w, c19.x, r4.x, r4.y
					    frc r2.w, r2.w
					    mad r2.w, r2.w, c32.z, c32.w
					    sincos r4.xy, r2.w
					    mad r3.xzw, r4.yyxy, c35.xyxy, c35.yyyz
					    nrm r4.xyz, r3.xzww
					    dp3 r2.x, r2, r4
					    mul r2.y, r2.z, r2.z
					    max r3.x, r2.x, c31.z
					    mad r2.x, r2.x, -c22.x, r3.y
					    pow r2.z, r3.x, c21.x
					    mul r3.xzw, r2.z, c18.xyyz
					    mul r3.xzw, r3, c20.x
					    mad_pp r3.xzw, r3, r1.w, r1.xyyz
					    mul_pp r2.xzw, r2.x, r3
					    lrp r4.x, r2.y, r3.y, c23.x
					    mad_pp r1.xyz, r2.xzww, r4.x, r0
					    texld r2, v5, s4
					    mad_sat r0.x, r2.w, v5.z, -v5.w
					    mul r2, r0.x, v6
					    mad_pp r0, r2, r0.w, r1
					    add r1.xy, -c26, c26.zwzw
					    add r1.xy, r1, -v3_abs
					    mul_sat_pp r1.xy, r1, v3.zwzw
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r0, r0, r1.x
					    mul_pp oC0, r0, v0.w
					
					// approximately 162 instruction slots used (10 texture, 152 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_18[5];
						vec4 _SpecularColor;
						float _LightAngle;
						float _SpecularPower;
						float _Reflectivity;
						float _Diffuse;
						float _Ambient;
						vec4 unused_0_25[4];
						float _ShaderFlags;
						float _ScaleRatioA;
						vec4 unused_0_28[3];
						vec4 _ClipRect;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						vec4 unused_0_33[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					float u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat10;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;
					    u_xlat1.xy = vec2(0.5, 0.5) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
					    u_xlat10_2 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat2.xy = u_xlat10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat10_3 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat17 = (-u_xlat10_3.w) + vs_TEXCOORD1.z;
					    u_xlat3.x = _OutlineWidth * _ScaleRatioA;
					    u_xlat3.x = u_xlat3.x * vs_TEXCOORD1.y;
					    u_xlat8 = u_xlat3.x * 0.5;
					    u_xlat3.x = min(u_xlat3.x, 1.0);
					    u_xlat3.x = sqrt(u_xlat3.x);
					    u_xlat13 = u_xlat17 * vs_TEXCOORD1.y + u_xlat8;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat17 = u_xlat17 * vs_TEXCOORD1.y + (-u_xlat8);
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat0.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + vs_TEXCOORD3.xyz;
					    u_xlat10_4 = texture(_Cube, u_xlat2.xyz);
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat15 = u_xlat3.x * u_xlat13;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_4.xyz;
					    u_xlat3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat3.xyz;
					    u_xlat3.w = u_xlat10_1.w * _FaceColor.w;
					    u_xlat3.xyz = u_xlat1.xyz * u_xlat3.www;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1 = u_xlat10_1 * _OutlineColor;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1 = (-u_xlat3) + u_xlat1;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1 + u_xlat3;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat3.x = u_xlat15 * vs_TEXCOORD1.y;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD1.y + 1.0;
					    u_xlat17 = u_xlat3.x * 0.5 + u_xlat17;
					    u_xlat15 = u_xlat17 / u_xlat15;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat3 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-u_xlat1.w) * u_xlat15 + 1.0;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat3.www;
					    u_xlat2.x = sin(_LightAngle);
					    u_xlat4 = cos(_LightAngle);
					    u_xlat2.y = u_xlat4;
					    u_xlat2.z = -1.0;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = u_xlat0.z * u_xlat0.z;
					    u_xlat10 = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * _Reflectivity;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * _SpecularColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat3.www + u_xlat3.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = (-_Ambient) + 1.0;
					    u_xlat0.x = u_xlat5 * u_xlat0.x + _Ambient;
					    u_xlat3.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat0.x = u_xlat10_1.w * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat0.xxxx * vs_COLOR1;
					    u_xlat0 = u_xlat1 * vec4(u_xlat15) + u_xlat3;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;
					    return;
					}"
				}
				SubProgram "d3d9 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" "GLOW_ON" }
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Ambient;
					//   float _Bevel;
					//   float _BevelClamp;
					//   float _BevelOffset;
					//   float _BevelRoundness;
					//   float _BevelWidth;
					//   float _BumpFace;
					//   sampler2D _BumpMap;
					//   float _BumpOutline;
					//   float4 _ClipRect;
					//   samplerCUBE _Cube;
					//   float _Diffuse;
					//   float4 _FaceColor;
					//   sampler2D _FaceTex;
					//   float _FaceUVSpeedX;
					//   float _FaceUVSpeedY;
					//   float4 _GlowColor;
					//   float _GlowInner;
					//   float _GlowOffset;
					//   float _GlowOuter;
					//   float _GlowPower;
					//   float _GradientScale;
					//   float _LightAngle;
					//   sampler2D _MainTex;
					//   float4 _OutlineColor;
					//   float _OutlineSoftness;
					//   sampler2D _OutlineTex;
					//   float _OutlineUVSpeedX;
					//   float _OutlineUVSpeedY;
					//   float _OutlineWidth;
					//   float4 _ReflectFaceColor;
					//   float4 _ReflectOutlineColor;
					//   float _Reflectivity;
					//   float _ScaleRatioA;
					//   float _ScaleRatioB;
					//   float _ShaderFlags;
					//   float4 _SpecularColor;
					//   float _SpecularPower;
					//   float _TextureHeight;
					//   float _TextureWidth;
					//   float4 _Time;
					//
					//
					// Registers:
					//
					//   Name                 Reg   Size
					//   -------------------- ----- ----
					//   _Time                c0       1
					//   _FaceUVSpeedX        c1       1
					//   _FaceUVSpeedY        c2       1
					//   _FaceColor           c3       1
					//   _OutlineSoftness     c4       1
					//   _OutlineUVSpeedX     c5       1
					//   _OutlineUVSpeedY     c6       1
					//   _OutlineColor        c7       1
					//   _OutlineWidth        c8       1
					//   _Bevel               c9       1
					//   _BevelOffset         c10      1
					//   _BevelWidth          c11      1
					//   _BevelClamp          c12      1
					//   _BevelRoundness      c13      1
					//   _BumpOutline         c14      1
					//   _BumpFace            c15      1
					//   _ReflectFaceColor    c16      1
					//   _ReflectOutlineColor c17      1
					//   _SpecularColor       c18      1
					//   _LightAngle          c19      1
					//   _SpecularPower       c20      1
					//   _Reflectivity        c21      1
					//   _Diffuse             c22      1
					//   _Ambient             c23      1
					//   _GlowColor           c24      1
					//   _GlowOffset          c25      1
					//   _GlowOuter           c26      1
					//   _GlowInner           c27      1
					//   _GlowPower           c28      1
					//   _ShaderFlags         c29      1
					//   _ScaleRatioA         c30      1
					//   _ScaleRatioB         c31      1
					//   _ClipRect            c32      1
					//   _TextureWidth        c33      1
					//   _TextureHeight       c34      1
					//   _GradientScale       c35      1
					//   _FaceTex             s0       1
					//   _OutlineTex          s1       1
					//   _BumpMap             s2       1
					//   _Cube                s3       1
					//   _MainTex             s4       1
					//
					
					    ps_3_0
					    def c36, 0.00999999978, 2, -1, -0.00138883968
					    def c37, 0.5, 1, 0, -0.5
					    def c38, 0.249999955, 0.25, 6.28318548, -3.14159274
					    def c39, -2.52398507e-007, 2.47609005e-005, 0.0416666418, 0
					    def c40, 0.159154937, 0.5, 0, 0
					    def c41, 1, 0, -1, 0
					    dcl_color_pp v0
					    dcl_texcoord v1.xy
					    dcl_texcoord1 v2.yzw
					    dcl_texcoord2 v3
					    dcl_texcoord3 v4.xyz
					    dcl_texcoord4 v5
					    dcl_color1 v6
					    dcl_texcoord5 v7
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_cube s3
					    dcl_2d s4
					    add r0.x, c10.x, v2.w
					    rcp r0.y, c33.x
					    mul r1.x, r0.y, c37.x
					    rcp r0.y, c34.x
					    mul r1.w, r0.y, c37.x
					    mov_pp r1.yz, c37.z
					    add r2, -r1, v1.xyxy
					    add r1, r1, v1.xyxy
					    texld r3, r2, s4
					    texld r2, r2.zwzw, s4
					    mov r2.z, r2.w
					    mov r2.x, r3.w
					    texld r3, r1, s4
					    texld r1, r1.zwzw, s4
					    mov r2.w, r1.w
					    mov r2.y, r3.w
					    add r0, r0.x, r2
					    add r0, r0, c37.w
					    mov r1.x, c8.x
					    add r1.y, r1.x, c11.x
					    max r2.x, c36.x, r1.y
					    rcp r1.y, r2.x
					    mul r1.z, r2.x, c9.x
					    mul r1.z, r1.z, c35.x
					    mul r1.z, r1.z, -c36.y
					    mad_sat r0, r0, r1.y, c37.x
					    mad r2, r0, c36.y, c36.z
					    add r2, -r2_abs, c37.y
					    mov r3.xyz, c37
					    mul r1.y, r3.x, c29.x
					    frc r1.y, r1_abs.y
					    cmp r1.y, c29.x, r1.y, -r1.y
					    add r1.y, r1.y, c37.w
					    cmp r0, r1.y, r2, r0
					    mad r2, r0, c38.x, c38.y
					    frc r2, r2
					    mad r2, r2, c38.z, c38.w
					    mul r2, r2, r2
					    mad r4, r2, c39.x, c39.y
					    mad r4, r2, r4, c36.w
					    mad r4, r2, r4, c39.z
					    mad r4, r2, r4, c37.w
					    mad r2, r2, r4, c37.y
					    lrp r4, c13.x, r2, r0
					    add r0.x, r3.y, -c12.x
					    min r2, r0.x, r4
					    mul r0.xy, r1.z, r2.xzzw
					    mad r0.xy, r2.ywzw, r1.z, -r0
					    mov r0.w, -c37.y
					    dp2add r1.y, r0.wyzw, r0.wyzw, c37.z
					    mul r2.xyz, r0.wyww, c37.yyzw
					    rsq r0.y, r1.y
					    mul r1.yzw, r0.y, r2.xxyz
					    mov_pp r0.z, c37.y
					    dp2add r0.y, r0.zxzw, r0.zxzw, c37.z
					    rsq r0.y, r0.y
					    mul r2.x, r0.y, r0.x
					    mul r2.yz, r0.y, c37
					    mul r0.xyz, r1.yzww, r2
					    mad r0.xyz, r2.zxyw, r1.zwyw, -r0
					    mov r1.y, c0.y
					    mul r2.x, r1.y, c1.x
					    mul r2.y, r1.y, c2.x
					    add r1.zw, r2.xyxy, v7.xyxy
					    texld_pp r2, r1.zwzw, s2
					    texld r4, r1.zwzw, s0
					    mad_pp r2.xy, r2.wyzw, c36.y, c36.z
					    dp2add_sat_pp r0.w, r2, r2, c37.z
					    add_pp r0.w, -r0.w, c37.y
					    rsq_pp r0.w, r0.w
					    rcp_pp r2.z, r0.w
					    mov r3.x, c15.x
					    add r0.w, -r3.x, c14.x
					    texld r5, v1, s4
					    add r1.z, -r5.w, v2.z
					    mul r1.x, r1.x, c30.x
					    mul_pp r1.w, r1.x, v2.y
					    mad r1.x, r1.x, -v2.y, c37.y
					    mul_pp r2.w, r1.w, c37.x
					    rsq r1.w, r1.w
					    rcp_pp r1.w, r1.w
					    cmp_pp r1.x, r1.x, r1.w, c37.y
					    mad_sat_pp r1.w, r1.z, v2.y, r2.w
					    mad_pp r2.w, r1.z, v2.y, -r2.w
					    mad r0.w, r1.w, r0.w, c15.x
					    mad r0.xyz, r2, -r0.w, r0
					    nrm r2.xyz, r0
					    dp3 r0.x, v4, -r2
					    add r0.x, r0.x, r0.x
					    mad r0.xyz, r2, r0.x, v4
					    texld_pp r0, r0, s3
					    mov r5.xyz, c16
					    add r5.xyz, -r5, c17
					    mad r5.xyz, r1.w, r5, c16
					    mul_pp r0.w, r1.x, r1.w
					    mul r0.xyz, r0, r5
					    mul_pp r5.xyz, c3, v0
					    mul_pp r4.xyz, r4, r5
					    mul_pp r5.w, r4.w, c3.w
					    mul_pp r5.xyz, r4, r5.w
					    mul r4.x, r1.y, c5.x
					    mul r4.y, r1.y, c6.x
					    add r1.xy, r4, v7.zwzw
					    texld r4, r1, s1
					    mul_pp r4, r4, c7
					    mul_pp r4.xyz, r4.w, r4
					    lrp_pp r6, r0.w, r4, r5
					    mov r1.x, c30.x
					    mul r0.w, r1.x, c4.x
					    mul_pp r1.x, r0.w, v2.y
					    mad_pp r0.w, r0.w, v2.y, c37.y
					    rcp r0.w, r0.w
					    mad_pp r1.x, r1.x, c37.x, r2.w
					    mul_sat_pp r0.w, r0.w, r1.x
					    add_pp r0.w, -r0.w, c37.y
					    mul_pp r4, r0.w, r6
					    mad r0.w, r6.w, -r0.w, c37.y
					    mul r0.xyz, r0, r4.w
					    mov r1.xy, c40
					    mad r1.x, c19.x, r1.x, r1.y
					    frc r1.x, r1.x
					    mad r1.x, r1.x, c38.z, c38.w
					    sincos r5.xy, r1.x
					    mad r1.xyw, r5.yxzy, c41.xxzy, c41.yyzz
					    nrm r5.xyz, r1.xyww
					    dp3 r1.x, r2, r5
					    mul r1.y, r2.z, r2.z
					    max r2.x, r1.x, c37.z
					    mad r1.x, r1.x, -c22.x, r3.y
					    pow r1.w, r2.x, c21.x
					    mul r2.xyz, r1.w, c18
					    mul r2.xyz, r2, c20.x
					    mad_pp r2.xyz, r2, r4.w, r4
					    mul_pp r2.xyz, r1.x, r2
					    lrp r2.w, r1.y, r3.y, c23.x
					    mad_pp r4.xyz, r2, r2.w, r0
					    texld r2, v5, s4
					    mad_sat r0.x, r2.w, v5.z, -v5.w
					    mul r2, r0.x, v6
					    mad_pp r0, r2, r0.w, r4
					    mov r1.x, c31.x
					    mul r1.y, r1.x, c25.x
					    mul r1.yz, r1, v2.y
					    mad r1.y, r1.y, -c37.x, r1.z
					    mul r1.x, r1.x, c26.x
					    cmp r1.x, r1.y, r1.x, c27.x
					    mul r1.x, r1.x, v2.y
					    mad r1.z, r1.x, c37.x, c37.y
					    rcp r1.z, r1.z
					    mul r1.y, r1.z, r1.y
					    abs_sat r1.y, r1.y
					    pow r2.x, r1.y, c28.x
					    add r1.y, -r2.x, c37.y
					    mul r1.z, r1.x, c37.x
					    mad r1.x, r1.x, -c37.x, c37.y
					    rsq r1.z, r1.z
					    rcp r1.z, r1.z
					    cmp r1.x, r1.x, r1.z, c37.y
					    mul r1.x, r1.x, r1.y
					    dp2add_sat r1.x, c24.w, r1.x, r3.z
					    mad_pp r0.xyz, c24, r1.x, r0
					    add r1.xy, -c32, c32.zwzw
					    add r1.xy, r1, -v3_abs
					    mul_sat_pp r1.xy, r1, v3.zwzw
					    mul_pp r1.x, r1.y, r1.x
					    mul_pp r0, r0, r1.x
					    mul_pp oC0, r0, v0.w
					
					// approximately 186 instruction slots used (10 texture, 176 arithmetic)"
				}
				SubProgram "d3d11 " {
					Keywords { "UNDERLAY_ON" "BEVEL_ON" "GLOW_ON" }
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _FaceUVSpeedX;
						float _FaceUVSpeedY;
						vec4 _FaceColor;
						float _OutlineSoftness;
						float _OutlineUVSpeedX;
						float _OutlineUVSpeedY;
						vec4 _OutlineColor;
						float _OutlineWidth;
						float _Bevel;
						float _BevelOffset;
						float _BevelWidth;
						float _BevelClamp;
						float _BevelRoundness;
						float _BumpOutline;
						float _BumpFace;
						vec4 _ReflectFaceColor;
						vec4 _ReflectOutlineColor;
						vec4 unused_0_18[5];
						vec4 _SpecularColor;
						float _LightAngle;
						float _SpecularPower;
						float _Reflectivity;
						float _Diffuse;
						float _Ambient;
						vec4 unused_0_25[2];
						vec4 _GlowColor;
						float _GlowOffset;
						float _GlowOuter;
						float _GlowInner;
						float _GlowPower;
						float _ShaderFlags;
						float _ScaleRatioA;
						float _ScaleRatioB;
						vec4 unused_0_34[2];
						vec4 _ClipRect;
						float _TextureWidth;
						float _TextureHeight;
						float _GradientScale;
						vec4 unused_0_39[2];
					};
					layout(std140) uniform UnityPerCamera {
						vec4 _Time;
						vec4 unused_1_1[8];
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _FaceTex;
					uniform  sampler2D _OutlineTex;
					uniform  sampler2D _BumpMap;
					uniform  samplerCube _Cube;
					in  vec4 vs_COLOR0;
					in  vec2 vs_TEXCOORD0;
					in  vec4 vs_TEXCOORD1;
					in  vec4 vs_TEXCOORD2;
					in  vec3 vs_TEXCOORD3;
					in  vec4 vs_TEXCOORD4;
					in  vec4 vs_COLOR1;
					in  vec4 vs_TEXCOORD5;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat4;
					vec4 u_xlat10_4;
					float u_xlat5;
					float u_xlat6;
					bool u_xlatb6;
					float u_xlat8;
					float u_xlat10;
					float u_xlat11;
					bool u_xlatb11;
					float u_xlat13;
					float u_xlat15;
					float u_xlat16;
					float u_xlat17;
					void main()
					{
					    u_xlat0.x = vs_TEXCOORD1.w + _BevelOffset;
					    u_xlat1.xy = vec2(0.5, 0.5) / vec2(_TextureWidth, _TextureHeight);
					    u_xlat1.z = 0.0;
					    u_xlat2 = (-u_xlat1.xzzy) + vs_TEXCOORD0.xyxy;
					    u_xlat1 = u_xlat1.xzzy + vs_TEXCOORD0.xyxy;
					    u_xlat3 = texture(_MainTex, u_xlat2.xy).wxyz;
					    u_xlat10_2 = texture(_MainTex, u_xlat2.zw);
					    u_xlat3.z = u_xlat10_2.w;
					    u_xlat10_2 = texture(_MainTex, u_xlat1.xy);
					    u_xlat10_1 = texture(_MainTex, u_xlat1.zw);
					    u_xlat3.w = u_xlat10_1.w;
					    u_xlat3.y = u_xlat10_2.w;
					    u_xlat0 = u_xlat0.xxxx + u_xlat3;
					    u_xlat0 = u_xlat0 + vec4(-0.5, -0.5, -0.5, -0.5);
					    u_xlat1.x = _BevelWidth + _OutlineWidth;
					    u_xlat1.x = max(u_xlat1.x, 0.00999999978);
					    u_xlat0 = u_xlat0 / u_xlat1.xxxx;
					    u_xlat1.x = u_xlat1.x * _Bevel;
					    u_xlat1.x = u_xlat1.x * _GradientScale;
					    u_xlat1.x = u_xlat1.x * -2.0;
					    u_xlat0 = u_xlat0 + vec4(0.5, 0.5, 0.5, 0.5);
					    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
					    u_xlat2 = u_xlat0 * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
					    u_xlat2 = -abs(u_xlat2) + vec4(1.0, 1.0, 1.0, 1.0);
					    u_xlat6 = _ShaderFlags * 0.5;
					    u_xlatb11 = u_xlat6>=(-u_xlat6);
					    u_xlat6 = fract(abs(u_xlat6));
					    u_xlat6 = (u_xlatb11) ? u_xlat6 : (-u_xlat6);
					    u_xlatb6 = u_xlat6>=0.5;
					    u_xlat0 = (bool(u_xlatb6)) ? u_xlat2 : u_xlat0;
					    u_xlat2 = u_xlat0 * vec4(1.57079601, 1.57079601, 1.57079601, 1.57079601);
					    u_xlat2 = sin(u_xlat2);
					    u_xlat2 = (-u_xlat0) + u_xlat2;
					    u_xlat0 = vec4(vec4(_BevelRoundness, _BevelRoundness, _BevelRoundness, _BevelRoundness)) * u_xlat2 + u_xlat0;
					    u_xlat6 = (-_BevelClamp) + 1.0;
					    u_xlat0 = min(u_xlat0, vec4(u_xlat6));
					    u_xlat0.xz = u_xlat1.xx * u_xlat0.xz;
					    u_xlat0.yz = u_xlat0.wy * u_xlat1.xx + (-u_xlat0.zx);
					    u_xlat0.x = float(-1.0);
					    u_xlat0.w = float(1.0);
					    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
					    u_xlat1.x = inversesqrt(u_xlat1.x);
					    u_xlat15 = dot(u_xlat0.zw, u_xlat0.zw);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat2.x = u_xlat15 * u_xlat0.z;
					    u_xlat2.yz = vec2(u_xlat15) * vec2(1.0, 0.0);
					    u_xlat0.z = 0.0;
					    u_xlat0.xyz = u_xlat1.xxx * u_xlat0.xyz;
					    u_xlat1.xyz = u_xlat0.xyz * u_xlat2.xyz;
					    u_xlat0.xyz = u_xlat2.zxy * u_xlat0.yzx + (-u_xlat1.xyz);
					    u_xlat1.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;
					    u_xlat10_2 = texture(_BumpMap, u_xlat1.xy);
					    u_xlat10_1 = texture(_FaceTex, u_xlat1.xy);
					    u_xlat2.xy = u_xlat10_2.wy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
					    u_xlat15 = dot(u_xlat2.xy, u_xlat2.xy);
					    u_xlat15 = min(u_xlat15, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat2.z = sqrt(u_xlat15);
					    u_xlat15 = (-_BumpFace) + _BumpOutline;
					    u_xlat17 = _OutlineWidth * _ScaleRatioA;
					    u_xlat17 = u_xlat17 * vs_TEXCOORD1.y;
					    u_xlat3.x = u_xlat17 * 0.5;
					    u_xlat17 = min(u_xlat17, 1.0);
					    u_xlat17 = sqrt(u_xlat17);
					    u_xlat10_4 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat8 = (-u_xlat10_4.w) + vs_TEXCOORD1.z;
					    u_xlat13 = u_xlat8 * vs_TEXCOORD1.y + u_xlat3.x;
					    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
					    u_xlat3.x = u_xlat8 * vs_TEXCOORD1.y + (-u_xlat3.x);
					    u_xlat8 = u_xlat8 * vs_TEXCOORD1.y;
					    u_xlat15 = u_xlat13 * u_xlat15 + _BumpFace;
					    u_xlat0.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + u_xlat0.xyz;
					    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat15 = inversesqrt(u_xlat15);
					    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
					    u_xlat15 = dot(vs_TEXCOORD3.xyz, (-u_xlat0.xyz));
					    u_xlat15 = u_xlat15 + u_xlat15;
					    u_xlat2.xyz = u_xlat0.xyz * vec3(u_xlat15) + vs_TEXCOORD3.xyz;
					    u_xlat10_4 = texture(_Cube, u_xlat2.xyz);
					    u_xlat2.xyz = (-_ReflectFaceColor.xyz) + _ReflectOutlineColor.xyz;
					    u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz + _ReflectFaceColor.xyz;
					    u_xlat15 = u_xlat17 * u_xlat13;
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_4.xyz;
					    u_xlat4.xyz = vs_COLOR0.xyz * _FaceColor.xyz;
					    u_xlat1.xyz = u_xlat10_1.xyz * u_xlat4.xyz;
					    u_xlat4.w = u_xlat10_1.w * _FaceColor.w;
					    u_xlat4.xyz = u_xlat1.xyz * u_xlat4.www;
					    u_xlat1.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;
					    u_xlat10_1 = texture(_OutlineTex, u_xlat1.xy);
					    u_xlat1 = u_xlat10_1 * _OutlineColor;
					    u_xlat1.xyz = u_xlat1.www * u_xlat1.xyz;
					    u_xlat1 = (-u_xlat4) + u_xlat1;
					    u_xlat1 = vec4(u_xlat15) * u_xlat1 + u_xlat4;
					    u_xlat15 = _OutlineSoftness * _ScaleRatioA;
					    u_xlat17 = u_xlat15 * vs_TEXCOORD1.y;
					    u_xlat15 = u_xlat15 * vs_TEXCOORD1.y + 1.0;
					    u_xlat17 = u_xlat17 * 0.5 + u_xlat3.x;
					    u_xlat15 = u_xlat17 / u_xlat15;
					    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
					    u_xlat15 = (-u_xlat15) + 1.0;
					    u_xlat4 = vec4(u_xlat15) * u_xlat1;
					    u_xlat15 = (-u_xlat1.w) * u_xlat15 + 1.0;
					    u_xlat1.xyz = u_xlat2.xyz * u_xlat4.www;
					    u_xlat2.x = sin(_LightAngle);
					    u_xlat3.x = cos(_LightAngle);
					    u_xlat2.y = u_xlat3.x;
					    u_xlat2.z = -1.0;
					    u_xlat16 = dot(u_xlat2.xyz, u_xlat2.xyz);
					    u_xlat16 = inversesqrt(u_xlat16);
					    u_xlat2.xyz = vec3(u_xlat16) * u_xlat2.xyz;
					    u_xlat0.x = dot(u_xlat0.xyz, u_xlat2.xyz);
					    u_xlat5 = u_xlat0.z * u_xlat0.z;
					    u_xlat10 = max(u_xlat0.x, 0.0);
					    u_xlat0.x = (-u_xlat0.x) * _Diffuse + 1.0;
					    u_xlat10 = log2(u_xlat10);
					    u_xlat10 = u_xlat10 * _Reflectivity;
					    u_xlat10 = exp2(u_xlat10);
					    u_xlat2.xyz = vec3(u_xlat10) * _SpecularColor.xyz;
					    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_SpecularPower, _SpecularPower, _SpecularPower));
					    u_xlat2.xyz = u_xlat2.xyz * u_xlat4.www + u_xlat4.xyz;
					    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
					    u_xlat0.x = (-_Ambient) + 1.0;
					    u_xlat0.x = u_xlat5 * u_xlat0.x + _Ambient;
					    u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat1.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD4.xy);
					    u_xlat0.x = u_xlat10_1.w * vs_TEXCOORD4.z + (-vs_TEXCOORD4.w);
					    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
					    u_xlat1 = u_xlat0.xxxx * vs_COLOR1;
					    u_xlat0 = u_xlat1 * vec4(u_xlat15) + u_xlat4;
					    u_xlat1.x = _GlowOffset * _ScaleRatioB;
					    u_xlat1.x = u_xlat1.x * vs_TEXCOORD1.y;
					    u_xlat1.x = (-u_xlat1.x) * 0.5 + u_xlat8;
					    u_xlatb6 = u_xlat1.x>=0.0;
					    u_xlat6 = u_xlatb6 ? 1.0 : float(0.0);
					    u_xlat11 = _GlowOuter * _ScaleRatioB + (-_GlowInner);
					    u_xlat6 = u_xlat6 * u_xlat11 + _GlowInner;
					    u_xlat6 = u_xlat6 * vs_TEXCOORD1.y;
					    u_xlat11 = u_xlat6 * 0.5 + 1.0;
					    u_xlat6 = u_xlat6 * 0.5;
					    u_xlat6 = min(u_xlat6, 1.0);
					    u_xlat6 = sqrt(u_xlat6);
					    u_xlat1.x = u_xlat1.x / u_xlat11;
					    u_xlat1.x = min(abs(u_xlat1.x), 1.0);
					    u_xlat1.x = log2(u_xlat1.x);
					    u_xlat1.x = u_xlat1.x * _GlowPower;
					    u_xlat1.x = exp2(u_xlat1.x);
					    u_xlat1.x = (-u_xlat1.x) + 1.0;
					    u_xlat1.x = u_xlat6 * u_xlat1.x;
					    u_xlat1.x = dot(_GlowColor.ww, u_xlat1.xx);
					    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
					    u_xlat0.xyz = _GlowColor.xyz * u_xlat1.xxx + u_xlat0.xyz;
					    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;
					    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);
					    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;
					    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
					    u_xlat1.x = u_xlat1.y * u_xlat1.x;
					    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
					    SV_Target0 = u_xlat0 * vs_COLOR0.wwww;
					    return;
					}"
				}
			}
		}
	}
	Fallback "TextMeshPro/Mobile/Distance Field"
	CustomEditor "TMPro.EditorUtilities.TMP_SDFShaderGUI"
}