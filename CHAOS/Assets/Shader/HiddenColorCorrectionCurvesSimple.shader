Shader "Hidden/ColorCorrectionCurvesSimple" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "" {}
		_RgbTex ("_RgbTex (RGB)", 2D) = "" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 15778
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mov o1.xy, v1
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 7 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_0_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _MainTex;
					//   sampler2D _RgbTex;
					//   float _Saturation;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Saturation  c0       1
					//   _MainTex     s0       1
					//   _RgbTex      s1       1
					//
					
					    ps_3_0
					    def c1, 1, 0, 0.125, 0.375
					    def c2, 1, 0, 0.625, 0
					    def c3, 0.219999999, 0.707000017, 0.0710000023, 0
					    dcl_texcoord_pp v0.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v0, s0
					    mad_pp r1.xy, r0.y, c1, c1.ywzw
					    texld r1, r1, s1
					    mul_pp r1.xyz, r1, c1.yxyw
					    mad_pp r0.xy, r0.x, c1, c1.yzzw
					    texld r2, r0, s1
					    mad_pp r1.xyz, r2, c1.xyyw, r1
					    mad_pp r0.xy, r0.z, c2, c2.yzzw
					    mov_pp oC0.w, r0.w
					    texld r0, r0, s1
					    mad_pp r0.xyz, r0, c1.yyxw, r1
					    dp3_pp r0.w, r0, c3
					    add_pp r0.xyz, -r0.w, r0
					    mad_pp oC0.xyz, c0.x, r0, r0.w
					
					// approximately 14 instruction slots used (4 texture, 10 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Saturation;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat16_2;
					vec4 u_xlat10_2;
					float u_xlat16_9;
					void main()
					{
					    u_xlat0.y = float(0.125);
					    u_xlat0.w = float(0.375);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy).zxyw;
					    u_xlat0.xz = u_xlat1.yz;
					    u_xlat10_2 = texture(_RgbTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_RgbTex, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(0.0, 1.0, 0.0);
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.y = 0.625;
					    u_xlat10_1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(0.0, 0.0, 1.0) + u_xlat16_0.xyz;
					    u_xlat16_9 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_0.xyz = (-vec3(u_xlat16_9)) + u_xlat16_0.xyz;
					    SV_Target0.xyz = vec3(_Saturation) * u_xlat16_0.xyz + vec3(u_xlat16_9);
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						float _Saturation;
						vec4 unused_0_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _RgbTex;
					in  vec2 vs_TEXCOORD0;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat16_2;
					vec4 u_xlat10_2;
					float u_xlat16_9;
					void main()
					{
					    u_xlat0.y = float(0.125);
					    u_xlat0.w = float(0.375);
					    u_xlat1 = texture(_MainTex, vs_TEXCOORD0.xy).zxyw;
					    u_xlat0.xz = u_xlat1.yz;
					    u_xlat10_2 = texture(_RgbTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_RgbTex, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(0.0, 1.0, 0.0);
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_2.xyz;
					    SV_Target0.w = u_xlat1.w;
					    u_xlat1.y = 0.625;
					    u_xlat10_1 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat16_0.xyz = u_xlat10_1.xyz * vec3(0.0, 0.0, 1.0) + u_xlat16_0.xyz;
					    u_xlat16_9 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_0.xyz = (-vec3(u_xlat16_9)) + u_xlat16_0.xyz;
					    SV_Target0.xyz = vec3(_Saturation) * u_xlat16_0.xyz + vec3(u_xlat16_9);
					    return;
					}"
				}
			}
		}
	}
}