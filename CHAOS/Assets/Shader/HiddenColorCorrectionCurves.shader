Shader "Hidden/ColorCorrectionCurves" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "" {}
		_RgbTex ("_RgbTex (RGB)", 2D) = "" {}
		_ZCurve ("_ZCurve (RGB)", 2D) = "" {}
		_RgbDepthTex ("_RgbDepthTex (RGB)", 2D) = "" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 62782
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _CameraDepthTexture_ST;
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                   Reg   Size
					//   ---------------------- ----- ----
					//   glstate_matrix_mvp     c0       4
					//   _CameraDepthTexture_ST c4       1
					//   _MainTex_TexelSize     c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 r2.x, c0, v0
					    dp4 r2.y, c1, v0
					    dp4 r2.z, c2, v0
					    dp4 r2.w, c3, v0
					    mov o1.xy, v1
					    mov r0.x, c6.x
					    slt r0.x, c5.y, r0.x
					    mad r1.xy, v1, c4, c4.zwzw
					    mad r0.y, r1.y, c6.y, c6.z
					    mad r1.z, r0.x, r0.y, r1.y
					    mov o2.xy, r1.xzzw
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 13 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _CameraDepthTexture_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1.xy = in_TEXCOORD0.xy * _CameraDepthTexture_ST.xy + _CameraDepthTexture_ST.zw;
					    u_xlat3 = (-u_xlat1.y) + 1.0;
					    vs_TEXCOORD1.y = (u_xlatb0) ? u_xlat3 : u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _CameraDepthTexture_ST;
						vec4 _MainTex_TexelSize;
						vec4 unused_0_3[2];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec2 u_xlat1;
					float u_xlat3;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1.xy = in_TEXCOORD0.xy * _CameraDepthTexture_ST.xy + _CameraDepthTexture_ST.zw;
					    u_xlat3 = (-u_xlat1.y) + 1.0;
					    vs_TEXCOORD1.y = (u_xlatb0) ? u_xlat3 : u_xlat1.y;
					    vs_TEXCOORD1.x = u_xlat1.x;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   sampler2D _CameraDepthTexture;
					//   sampler2D _MainTex;
					//   sampler2D _RgbDepthTex;
					//   sampler2D _RgbTex;
					//   float _Saturation;
					//   float4 _ZBufferParams;
					//   sampler2D _ZCurve;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _Saturation         c1       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//   _RgbTex             s2       1
					//   _ZCurve             s3       1
					//   _RgbDepthTex        s4       1
					//
					
					    ps_3_0
					    def c2, 1, 0, 0.125, 0.375
					    def c3, 1, 0, 0.625, 0.5
					    def c4, 0.219999999, 0.707000017, 0.0710000023, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    dcl_2d s2
					    dcl_2d s3
					    dcl_2d s4
					    texld_pp r0, v1, s1
					    mad r0.x, c0.x, r0.x, c0.y
					    rcp_pp r0.x, r0.x
					    mov_pp r0.y, c3.w
					    texld_pp r0, r0, s3
					    texld_pp r1, v0, s0
					    mad_pp r0.yz, r1.y, c2.xxyw, c2.xyww
					    texld r2, r0.yzzw, s2
					    texld r3, r0.yzzw, s4
					    mul_pp r0.yzw, r2.xxyz, c2.xyxy
					    mad_pp r1.xy, r1.x, c2, c2.yzzw
					    texld r2, r1, s2
					    texld r4, r1, s4
					    mad_pp r0.yzw, r2.xxyz, c2.xxyy, r0
					    mad_pp r1.xy, r1.z, c3, c3.yzzw
					    mov_pp oC0.w, r1.w
					    texld r2, r1, s2
					    texld r1, r1, s4
					    mul_pp r1.xyz, r1, c2.yyxw
					    mad_pp r1.xyz, r4, c2.xyyw, r1
					    mad_pp r1.xyz, r3, c2.yxyw, r1
					    mad_pp r0.yzw, r2.xxyz, c2.xyyx, r0
					    lrp_pp r2.xyz, r0.x, r1, r0.yzww
					    dp3_pp r0.x, r2, c4
					    add_pp r0.yzw, -r0.x, r2.xxyz
					    mad_pp oC0.xyz, c1.x, r0.yzww, r0.x
					
					// approximately 26 instruction slots used (9 texture, 17 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						float _Saturation;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _RgbTex;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ZCurve;
					uniform  sampler2D _RgbDepthTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat10_3;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16_15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy).xzyw;
					    u_xlat1.x = u_xlat0.y;
					    u_xlat1.y = float(0.625);
					    u_xlat11.y = float(0.5);
					    u_xlat10_2 = texture(_RgbDepthTex, u_xlat1.xy);
					    u_xlat10_3 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(0.0, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.y = float(0.125);
					    u_xlat0.w = float(0.375);
					    u_xlat10_4 = texture(_RgbDepthTex, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_4.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_2.xyz;
					    u_xlat10_4 = texture(_RgbDepthTex, u_xlat0.zw);
					    u_xlat16_2.xyz = u_xlat10_4.xyz * vec3(0.0, 1.0, 0.0) + u_xlat16_2.xyz;
					    u_xlat10_4 = texture(_RgbTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_RgbTex, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(0.0, 1.0, 0.0);
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * vec3(0.0, 0.0, 1.0) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat10_3 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat15 = _ZBufferParams.x * u_xlat10_3.x + _ZBufferParams.y;
					    u_xlat11.x = float(1.0) / u_xlat15;
					    u_xlat10_1 = texture(_ZCurve, u_xlat11.xy);
					    u_xlat16_0.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_0.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    SV_Target0.xyz = vec3(_Saturation) * u_xlat16_0.xyz + vec3(u_xlat16_15);
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[5];
						float _Saturation;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _RgbTex;
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _ZCurve;
					uniform  sampler2D _RgbDepthTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec2 u_xlat1;
					vec4 u_xlat10_1;
					vec3 u_xlat16_2;
					vec4 u_xlat10_2;
					vec4 u_xlat10_3;
					vec3 u_xlat16_4;
					vec4 u_xlat10_4;
					vec2 u_xlat11;
					float u_xlat15;
					float u_xlat16_15;
					void main()
					{
					    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy).xzyw;
					    u_xlat1.x = u_xlat0.y;
					    u_xlat1.y = float(0.625);
					    u_xlat11.y = float(0.5);
					    u_xlat10_2 = texture(_RgbDepthTex, u_xlat1.xy);
					    u_xlat10_3 = texture(_RgbTex, u_xlat1.xy);
					    u_xlat16_2.xyz = u_xlat10_2.xyz * vec3(0.0, 0.0, 1.0);
					    SV_Target0.w = u_xlat0.w;
					    u_xlat0.y = float(0.125);
					    u_xlat0.w = float(0.375);
					    u_xlat10_4 = texture(_RgbDepthTex, u_xlat0.xy);
					    u_xlat16_2.xyz = u_xlat10_4.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_2.xyz;
					    u_xlat10_4 = texture(_RgbDepthTex, u_xlat0.zw);
					    u_xlat16_2.xyz = u_xlat10_4.xyz * vec3(0.0, 1.0, 0.0) + u_xlat16_2.xyz;
					    u_xlat10_4 = texture(_RgbTex, u_xlat0.zw);
					    u_xlat10_0 = texture(_RgbTex, u_xlat0.xy);
					    u_xlat16_4.xyz = u_xlat10_4.xyz * vec3(0.0, 1.0, 0.0);
					    u_xlat16_0.xyz = u_xlat10_0.xyz * vec3(1.0, 0.0, 0.0) + u_xlat16_4.xyz;
					    u_xlat16_0.xyz = u_xlat10_3.xyz * vec3(0.0, 0.0, 1.0) + u_xlat16_0.xyz;
					    u_xlat16_2.xyz = (-u_xlat16_0.xyz) + u_xlat16_2.xyz;
					    u_xlat10_3 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat15 = _ZBufferParams.x * u_xlat10_3.x + _ZBufferParams.y;
					    u_xlat11.x = float(1.0) / u_xlat15;
					    u_xlat10_1 = texture(_ZCurve, u_xlat11.xy);
					    u_xlat16_0.xyz = u_xlat10_1.xxx * u_xlat16_2.xyz + u_xlat16_0.xyz;
					    u_xlat16_15 = dot(u_xlat16_0.xyz, vec3(0.219999999, 0.707000017, 0.0710000023));
					    u_xlat16_0.xyz = (-vec3(u_xlat16_15)) + u_xlat16_0.xyz;
					    SV_Target0.xyz = vec3(_Saturation) * u_xlat16_0.xyz + vec3(u_xlat16_15);
					    return;
					}"
				}
			}
		}
	}
}