Shader "Toon/Basic" {
	Properties {
		_Color ("Main Color", Vector) = (0.5,0.5,0.5,1)
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_ToonShade ("ToonShader Cubemap(RGB)", Cube) = "" {}
	}
	SubShader {
		Tags { "RenderType" = "Opaque" }
		Pass {
			Name "BASE"
			Tags { "RenderType" = "Opaque" }
			ZClip Off
			Cull Off
			GpuProgramID 44141
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_ST;
					//   row_major float4x4 glstate_matrix_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name                      Reg   Size
					//   ------------------------- ----- ----
					//   glstate_matrix_mvp        c0       4
					//   glstate_matrix_modelview0 c4       3
					//   _MainTex_ST               c7       1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_normal v2
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xyz
					    dp4 r0.x, c0, v0
					    dp4 r0.y, c1, v0
					    dp4 r0.z, c2, v0
					    dp4 r0.w, c3, v0
					    mad o1.xy, v1, c7, c7.zwzw
					    dp3 o2.x, c4, v2
					    dp3 o2.y, c5, v2
					    dp3 o2.z, c6, v2
					    mad o0.xy, r0.w, c255, r0
					    mov o0.zw, r0
					
					// approximately 10 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = glstate_matrix_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_ST;
						vec4 unused_0_2;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						mat4x4 glstate_matrix_modelview0;
						vec4 unused_1_2[14];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					in  vec3 in_NORMAL0;
					out vec2 vs_TEXCOORD0;
					out vec3 vs_TEXCOORD1;
					vec4 u_xlat0;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    vs_TEXCOORD1.xyz = glstate_matrix_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _Color;
					//   sampler2D _MainTex;
					//   samplerCUBE _ToonShade;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _Color       c0       1
					//   _MainTex     s0       1
					//   _ToonShade   s1       1
					//
					
					    ps_3_0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xyz
					    dcl_2d s0
					    dcl_cube s1
					    texld_pp r0, v1, s1
					    add r0.xyz, r0, r0
					    texld r1, v0, s0
					    mul_pp r1, r1, c0
					    mul_pp oC0.xyz, r0, r1
					    mov_pp oC0.w, r1.w
					
					// approximately 6 instruction slots used (2 texture, 4 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube _ToonShade;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat10_0 = texture(_ToonShade, vs_TEXCOORD1.xyz);
					    u_xlat16_0.xyz = u_xlat10_0.xyz + u_xlat10_0.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_1 * _Color;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[3];
						vec4 _Color;
					};
					uniform  sampler2D _MainTex;
					uniform  samplerCube _ToonShade;
					in  vec2 vs_TEXCOORD0;
					in  vec3 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					void main()
					{
					    u_xlat10_0 = texture(_ToonShade, vs_TEXCOORD1.xyz);
					    u_xlat16_0.xyz = u_xlat10_0.xyz + u_xlat10_0.xyz;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat1 = u_xlat10_1 * _Color;
					    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
					    SV_Target0.w = u_xlat1.w;
					    return;
					}"
				}
			}
		}
	}
	Fallback "VertexLit"
}