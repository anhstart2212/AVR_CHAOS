Shader "Toon/Basic Outline" {
	Properties {
		_Color ("Main Color", Vector) = (0.5,0.5,0.5,1)
		_OutlineColor ("Outline Color", Vector) = (0,0,0,1)
		_Outline ("Outline width", Range(0.002, 0.03)) = 0.005
		_MainTex ("Base (RGB)", 2D) = "white" {}
		_ToonShade ("ToonShader Cubemap(RGB)", Cube) = "" {}
	}
	SubShader {
		Tags { "RenderType" = "Opaque" }
		UsePass "Toon/Basic/BASE"
		Pass {
			Name "OUTLINE"
			Tags { "LIGHTMODE" = "Always" "RenderType" = "Opaque" }
			Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
			ColorMask RGB -1
			ZClip Off
			Cull Front
			GpuProgramID 10521
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float _Outline;
					//   float4 _OutlineColor;
					//   row_major float4x4 glstate_matrix_invtrans_modelview0;
					//   row_major float4x4 glstate_matrix_mvp;
					//   row_major float4x4 glstate_matrix_projection;
					//
					//
					// Registers:
					//
					//   Name                               Reg   Size
					//   ---------------------------------- ----- ----
					//   glstate_matrix_mvp                 c0       4
					//   glstate_matrix_invtrans_modelview0 c4       3
					//   glstate_matrix_projection          c7       2
					//   _Outline                           c9       1
					//   _OutlineColor                      c10      1
					//
					
					    vs_3_0
					    def c11, 0.200000003, 0, 0, 0
					    dcl_position v0
					    dcl_normal v1
					    dcl_position o0
					    dcl_color o1
					    dp4 r2.w, c3, v0
					    dp3 r0.z, c6, v1
					    dp3 r0.x, c4, v1
					    dp3 r0.y, c5, v1
					    dp3 r0.z, r0, r0
					    rsq r0.z, r0.z
					    mul r0.xy, r0.z, r0
					    mul r0.zw, r0.xyxy, c7.xyxy
					    mul r0.xy, r0, c8
					    add r0.y, r0.y, r0.x
					    add r0.x, r0.w, r0.z
					    dp4 r0.z, c2, v0
					    mul r0.w, r0.z, c11.x
					    mov r2.z, r0.z
					    mul r0.xy, r0.w, r0
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    mad r2.xy, r0, c9.x, r1
					    mov o1, c10
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						float _Outline;
						vec4 _OutlineColor;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[5];
						vec4 _ProjectionParams;
						vec4 unused_1_2[3];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_2_1[4];
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_2_3[10];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_3_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_3_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat4 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat4 = inversesqrt(u_xlat4);
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.yy * glstate_matrix_projection[1].xy;
					    u_xlat0.xy = glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat4 = u_xlat1.z / _ProjectionParams.y;
					    u_xlat4 = (-u_xlat4) + 1.0;
					    u_xlat4 = u_xlat4 * _ProjectionParams.z;
					    u_xlat4 = max(u_xlat4, 0.0);
					    u_xlat4 = u_xlat4 * 0.200000003;
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    gl_Position.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
					    gl_Position.zw = u_xlat1.zw;
					    vs_COLOR0 = _OutlineColor;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						float _Outline;
						vec4 _OutlineColor;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[4];
						mat4x4 glstate_matrix_invtrans_modelview0;
						vec4 unused_1_3[10];
					};
					layout(std140) uniform UnityPerFrame {
						vec4 unused_2_0[5];
						mat4x4 glstate_matrix_projection;
						vec4 unused_2_2[13];
					};
					in  vec4 in_POSITION0;
					in  vec3 in_NORMAL0;
					out vec4 vs_COLOR0;
					vec3 u_xlat0;
					vec4 u_xlat1;
					vec2 u_xlat2;
					float u_xlat4;
					void main()
					{
					    u_xlat0.xyz = in_NORMAL0.yyy * glstate_matrix_invtrans_modelview0[1].xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[0].xyz * in_NORMAL0.xxx + u_xlat0.xyz;
					    u_xlat0.xyz = glstate_matrix_invtrans_modelview0[2].xyz * in_NORMAL0.zzz + u_xlat0.xyz;
					    u_xlat4 = dot(u_xlat0.xyz, u_xlat0.xyz);
					    u_xlat4 = inversesqrt(u_xlat4);
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    u_xlat2.xy = u_xlat0.yy * glstate_matrix_projection[1].xy;
					    u_xlat0.xy = glstate_matrix_projection[0].xy * u_xlat0.xx + u_xlat2.xy;
					    u_xlat1 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat1 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat1;
					    u_xlat1 = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat1;
					    u_xlat4 = u_xlat1.z * 0.200000003;
					    u_xlat0.xy = vec2(u_xlat4) * u_xlat0.xy;
					    gl_Position.xy = u_xlat0.xy * vec2(_Outline) + u_xlat1.xy;
					    gl_Position.zw = u_xlat1.zw;
					    vs_COLOR0 = _OutlineColor;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					    ps_3_0
					    dcl_color_pp v0
					    mov_pp oC0, v0
					
					// approximately 1 instruction slot used"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vs_COLOR0;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					in  vec4 vs_COLOR0;
					layout(location = 0) out vec4 SV_Target0;
					void main()
					{
					    SV_Target0 = vs_COLOR0;
					    return;
					}"
				}
			}
		}
	}
	Fallback "Toon/Basic"
}