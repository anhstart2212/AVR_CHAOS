Shader "Hidden/EdgeDetect" {
	Properties {
		_MainTex ("Base (RGB)", 2D) = "" {}
	}
	SubShader {
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 45739
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float _SampleDistance;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _SampleDistance    c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xy
					    dcl_texcoord4 o5.xy
					    dp4 r2.x, c0, v0
					    dp4 r2.y, c1, v0
					    dp4 r2.z, c2, v0
					    dp4 r2.w, c3, v0
					    mov r0.xy, c4
					    slt r0.z, r0.y, c6.x
					    mad r0.w, v1.y, c6.y, c6.z
					    mad r1.y, r0.z, r0.w, v1.y
					    mov r1.x, v1.x
					    mad o3.xy, -r0, c5.x, r1
					    mul r0.xy, r0, c6.zwzw
					    mad o4.xy, r0, c5.x, r1
					    mov o1.xy, v1
					    mov o2.xy, r1
					    mov o5.xy, r1
					    mad o0.xy, r2.w, c255, r2
					    mov o0.zw, r2
					
					// approximately 17 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
						float _SampleDistance;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD1.xy = u_xlat0.xy;
					    vs_TEXCOORD2.xy = (-_MainTex_TexelSize.xy) * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    u_xlat2.xy = _MainTex_TexelSize.xy * vec2(1.0, -1.0);
					    vs_TEXCOORD3.xy = u_xlat2.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD4.xy = u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
						float _SampleDistance;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD1.xy = u_xlat0.xy;
					    vs_TEXCOORD2.xy = (-_MainTex_TexelSize.xy) * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    u_xlat2.xy = _MainTex_TexelSize.xy * vec2(1.0, -1.0);
					    vs_TEXCOORD3.xy = u_xlat2.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD4.xy = u_xlat0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BgColor;
					//   float _BgFade;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _MainTex;
					//   float4 _Sensitivity;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Sensitivity               c0       1
					//   _BgColor                   c1       1
					//   _BgFade                    c2       1
					//   _MainTex                   s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.00392156886, 0, -0.100000001
					    def c4, 0.0900000036, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v3, s1
					    dp2add r0.z, r0.zwzw, c3, c3.z
					    texld_pp r1, v1, s1
					    dp2add r0.z, r1.zwzw, c3, -r0.z
					    dp2add r0.w, r1.zwzw, c3, c3.z
					    mul r0.w, r0.w, c4.x
					    mad r0.z, r0_abs.z, c0.x, -r0.w
					    cmp_pp r0.z, r0.z, c3.z, c3.x
					    add_pp r0.xy, -r0, r1
					    mul_pp r0.xy, r0_abs, c0.y
					    add_pp r0.x, r0.y, r0.x
					    mov r2.w, c3.w
					    mad r0.x, r0.x, c0.y, r2.w
					    cmp_pp r0.x, r0.x, c3.z, r0.z
					    texld_pp r3, v2, s1
					    dp2add r0.y, r3.zwzw, c3, c3.z
					    add_pp r1.xy, r1, -r3
					    dp2add r0.y, r1.zwzw, c3, -r0.y
					    mad r0.y, r0_abs.y, c0.x, -r0.w
					    cmp_pp r0.x, r0.y, c3.z, r0.x
					    mul_pp r0.yz, r1_abs.xxyw, c0.y
					    add_pp r0.y, r0.z, r0.y
					    mad r0.y, r0.y, c0.y, r2.w
					    cmp_pp r0.x, r0.y, c3.z, r0.x
					    texld_pp r1, v0, s0
					    add_pp r2, -r1, c1
					    mad_pp r1, c2.x, r2, r1
					    mul_pp oC0, r0.x, r1
					
					// approximately 33 instruction slots used (4 texture, 29 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Sensitivity;
						vec4 _BgColor;
						float _BgFade;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat16_0;
					vec4 u_xlat10_0;
					ivec3 u_xlati0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat16_1;
					vec4 u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					float u_xlat3;
					float u_xlat16_3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat16_6;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD3.xy);
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD1.xy);
					    u_xlat16_0.xy = (-u_xlat10_0.xy) + u_xlat10_1.xy;
					    u_xlat16_6 = dot(u_xlat10_0.zw, vec2(1.0, 0.00392156886));
					    u_xlat0.xy = abs(u_xlat16_0.xy) * _Sensitivity.yy;
					    u_xlat0.x = u_xlat0.y + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Sensitivity.y;
					    u_xlatb0.x = u_xlat0.x<0.100000001;
					    u_xlat16_3 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_3;
					    u_xlat6 = abs(u_xlat16_6) * _Sensitivity.x;
					    u_xlat9 = u_xlat16_3 * 0.0900000036;
					    u_xlatb0.z = u_xlat6<u_xlat9;
					    u_xlati0.xz = ivec2((uvec2(u_xlatb0.xz) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati0.x = u_xlati0.z * u_xlati0.x;
					    u_xlat0.x = (u_xlati0.x != 0) ? 1.0 : 0.0;
					    u_xlat10_2 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD2.xy);
					    u_xlat16_6 = dot(u_xlat10_2.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_1.xy = u_xlat10_1.xy + (-u_xlat10_2.xy);
					    u_xlat1.xy = abs(u_xlat16_1.xy) * _Sensitivity.yy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _Sensitivity.y;
					    u_xlatb1 = u_xlat1.x<0.100000001;
					    u_xlati1 = u_xlatb1 ? 1 : int(0);
					    u_xlat16_3 = (-u_xlat16_6) + u_xlat16_3;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb3 = u_xlat3<u_xlat9;
					    u_xlati3 = u_xlatb3 ? 1 : int(0);
					    u_xlati3 = u_xlati3 * u_xlati1;
					    u_xlat0.x = (u_xlati3 != 0) ? u_xlat0.x : 0.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Sensitivity;
						vec4 _BgColor;
						float _BgFade;
					};
					uniform  sampler2D _MainTex;
					uniform  sampler2D _CameraDepthNormalsTexture;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat16_0;
					vec4 u_xlat10_0;
					ivec3 u_xlati0;
					bvec3 u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat16_1;
					vec4 u_xlat10_1;
					int u_xlati1;
					bool u_xlatb1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					float u_xlat3;
					float u_xlat16_3;
					int u_xlati3;
					bool u_xlatb3;
					float u_xlat6;
					float u_xlat16_6;
					float u_xlat9;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD3.xy);
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD1.xy);
					    u_xlat16_0.xy = (-u_xlat10_0.xy) + u_xlat10_1.xy;
					    u_xlat16_6 = dot(u_xlat10_0.zw, vec2(1.0, 0.00392156886));
					    u_xlat0.xy = abs(u_xlat16_0.xy) * _Sensitivity.yy;
					    u_xlat0.x = u_xlat0.y + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Sensitivity.y;
					    u_xlatb0.x = u_xlat0.x<0.100000001;
					    u_xlat16_3 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_6 = (-u_xlat16_6) + u_xlat16_3;
					    u_xlat6 = abs(u_xlat16_6) * _Sensitivity.x;
					    u_xlat9 = u_xlat16_3 * 0.0900000036;
					    u_xlatb0.z = u_xlat6<u_xlat9;
					    u_xlati0.xz = ivec2((uvec2(u_xlatb0.xz) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati0.x = u_xlati0.z * u_xlati0.x;
					    u_xlat0.x = (u_xlati0.x != 0) ? 1.0 : 0.0;
					    u_xlat10_2 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD2.xy);
					    u_xlat16_6 = dot(u_xlat10_2.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_1.xy = u_xlat10_1.xy + (-u_xlat10_2.xy);
					    u_xlat1.xy = abs(u_xlat16_1.xy) * _Sensitivity.yy;
					    u_xlat1.x = u_xlat1.y + u_xlat1.x;
					    u_xlat1.x = u_xlat1.x * _Sensitivity.y;
					    u_xlatb1 = u_xlat1.x<0.100000001;
					    u_xlati1 = u_xlatb1 ? 1 : int(0);
					    u_xlat16_3 = (-u_xlat16_6) + u_xlat16_3;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb3 = u_xlat3<u_xlat9;
					    u_xlati3 = u_xlatb3 ? 1 : int(0);
					    u_xlati3 = u_xlati3 * u_xlati1;
					    u_xlat0.x = (u_xlati3 != 0) ? u_xlat0.x : 0.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 130314
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float _SampleDistance;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _SampleDistance    c5       1
					//
					
					    vs_3_0
					    def c6, 0, -2, 1, -1
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    dcl_texcoord3 o4.xy
					    dcl_texcoord4 o5.xy
					    dp4 r3.x, c0, v0
					    dp4 r3.y, c1, v0
					    dp4 r3.z, c2, v0
					    dp4 r3.w, c3, v0
					    mov r0.xz, c6
					    slt r0.y, c4.y, r0.x
					    mad r0.w, v1.y, c6.y, c6.z
					    mad r1.y, r0.y, r0.w, v1.y
					    mov r1.x, v1.x
					    mov r2.xy, c4
					    mad o2.xy, r2, c5.x, r1
					    mad o3.xy, r2, -c5.x, r1
					    mul r0, r0.zxxz, c5.x
					    add r2, r0, c6.xzzx
					    mul r2, r2, c4.xyxy
					    add r0, r0, c6.xwwx
					    mad o5.xy, r2.zwzw, r0, r1
					    mad o4.xy, r2, r0.zwzw, r1
					    mov o1.xy, v1
					    mad o0.xy, r3.w, c255, r3
					    mov o0.zw, r3
					
					// approximately 21 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
						float _SampleDistance;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD1.xy = _MainTex_TexelSize.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = (-_MainTex_TexelSize.xy) * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD4.xy = u_xlat1.zw * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!vs_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
						float _SampleDistance;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					out vec2 vs_TEXCOORD3;
					out vec2 vs_TEXCOORD4;
					vec4 u_xlat0;
					bool u_xlatb0;
					vec4 u_xlat1;
					float u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat2 = (-in_TEXCOORD0.y) + 1.0;
					    u_xlat0.y = (u_xlatb0) ? u_xlat2 : in_TEXCOORD0.y;
					    u_xlat0.x = in_TEXCOORD0.x;
					    vs_TEXCOORD1.xy = _MainTex_TexelSize.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD2.xy = (-_MainTex_TexelSize.xy) * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    u_xlat1 = _MainTex_TexelSize.xyxy * vec4(-1.0, 1.0, 1.0, -1.0);
					    vs_TEXCOORD3.xy = u_xlat1.xy * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    vs_TEXCOORD4.xy = u_xlat1.zw * vec2(vec2(_SampleDistance, _SampleDistance)) + u_xlat0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BgColor;
					//   float _BgFade;
					//   sampler2D _CameraDepthNormalsTexture;
					//   sampler2D _MainTex;
					//   float4 _Sensitivity;
					//
					//
					// Registers:
					//
					//   Name                       Reg   Size
					//   -------------------------- ----- ----
					//   _Sensitivity               c0       1
					//   _BgColor                   c1       1
					//   _BgFade                    c2       1
					//   _MainTex                   s0       1
					//   _CameraDepthNormalsTexture s1       1
					//
					
					    ps_3_0
					    def c3, 1, 0.00392156886, 0, -0.100000001
					    def c4, 0.0900000036, 0, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xy
					    dcl_texcoord3 v3.xy
					    dcl_texcoord4 v4.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld_pp r0, v3, s1
					    dp2add r1.x, r0.zwzw, c3, c3.z
					    mul r1.x, r1.x, c4.x
					    texld_pp r2, v4, s1
					    dp2add r1.y, r2.zwzw, c3, c3.z
					    add_pp r0.xy, r0, -r2
					    dp2add r0.z, r0.zwzw, c3, -r1.y
					    mad r0.z, r0_abs.z, c0.x, -r1.x
					    cmp_pp r0.z, r0.z, c3.z, c3.x
					    mul_pp r0.xy, r0_abs, c0.y
					    add_pp r0.x, r0.y, r0.x
					    mov r0.w, c3.w
					    mad r0.x, r0.x, c0.y, r0.w
					    cmp_pp r0.x, r0.x, c3.z, r0.z
					    texld_pp r1, v1, s1
					    dp2add r0.y, r1.zwzw, c3, c3.z
					    mul r0.y, r0.y, c4.x
					    texld_pp r2, v2, s1
					    dp2add r0.z, r2.zwzw, c3, c3.z
					    add_pp r1.xy, r1, -r2
					    dp2add r0.z, r1.zwzw, c3, -r0.z
					    mad r0.y, r0_abs.z, c0.x, -r0.y
					    cmp_pp r0.x, r0.y, c3.z, r0.x
					    mul_pp r0.yz, r1_abs.xxyw, c0.y
					    add_pp r0.y, r0.z, r0.y
					    mad r0.y, r0.y, c0.y, r0.w
					    cmp_pp r0.x, r0.y, c3.z, r0.x
					    texld r1, v0, s0
					    add r2, -r1, c1
					    mad r1, c2.x, r2, r1
					    mul_pp oC0, r0.x, r1
					
					// approximately 37 instruction slots used (5 texture, 32 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Sensitivity;
						vec4 _BgColor;
						float _BgFade;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat16_0;
					vec4 u_xlat10_0;
					ivec2 u_xlati0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					float u_xlat3;
					float u_xlat16_3;
					ivec3 u_xlati3;
					bvec3 u_xlatb3;
					float u_xlat6;
					float u_xlat16_6;
					float u_xlat9;
					float u_xlat16_9;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD4.xy);
					    u_xlat16_6 = dot(u_xlat10_0.zw, vec2(1.0, 0.00392156886));
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD3.xy);
					    u_xlat16_9 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_0.xy = (-u_xlat10_0.xy) + u_xlat10_1.xy;
					    u_xlat0.xy = abs(u_xlat16_0.xy) * _Sensitivity.yy;
					    u_xlat0.x = u_xlat0.y + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Sensitivity.y;
					    u_xlatb0.x = u_xlat0.x<0.100000001;
					    u_xlat16_3 = (-u_xlat16_6) + u_xlat16_9;
					    u_xlat6 = u_xlat16_9 * 0.0900000036;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb0.y = u_xlat3<u_xlat6;
					    u_xlati0.xy = ivec2((uvec2(u_xlatb0.xy) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati0.x = u_xlati0.y * u_xlati0.x;
					    u_xlat0.x = (u_xlati0.x != 0) ? 1.0 : 0.0;
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD2.xy);
					    u_xlat16_3 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat10_2 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD1.xy);
					    u_xlat16_6 = dot(u_xlat10_2.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_1.xy = (-u_xlat10_1.xy) + u_xlat10_2.xy;
					    u_xlat1.xy = abs(u_xlat16_1.xy) * _Sensitivity.yy;
					    u_xlat9 = u_xlat1.y + u_xlat1.x;
					    u_xlat9 = u_xlat9 * _Sensitivity.y;
					    u_xlatb3.z = u_xlat9<0.100000001;
					    u_xlat16_3 = (-u_xlat16_3) + u_xlat16_6;
					    u_xlat6 = u_xlat16_6 * 0.0900000036;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb3.x = u_xlat3<u_xlat6;
					    u_xlati3.xz = ivec2((uvec2(u_xlatb3.xz) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati3.x = u_xlati3.x * u_xlati3.z;
					    u_xlat0.x = (u_xlati3.x != 0) ? u_xlat0.x : 0.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
				SubProgram "d3d11_9x " {
					"!!ps_4_0_level_9_1
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[6];
						vec4 _Sensitivity;
						vec4 _BgColor;
						float _BgFade;
					};
					uniform  sampler2D _CameraDepthNormalsTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					in  vec2 vs_TEXCOORD3;
					in  vec2 vs_TEXCOORD4;
					layout(location = 0) out vec4 SV_Target0;
					vec2 u_xlat0;
					vec2 u_xlat16_0;
					vec4 u_xlat10_0;
					ivec2 u_xlati0;
					bvec2 u_xlatb0;
					vec4 u_xlat1;
					vec2 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					float u_xlat3;
					float u_xlat16_3;
					ivec3 u_xlati3;
					bvec3 u_xlatb3;
					float u_xlat6;
					float u_xlat16_6;
					float u_xlat9;
					float u_xlat16_9;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD4.xy);
					    u_xlat16_6 = dot(u_xlat10_0.zw, vec2(1.0, 0.00392156886));
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD3.xy);
					    u_xlat16_9 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_0.xy = (-u_xlat10_0.xy) + u_xlat10_1.xy;
					    u_xlat0.xy = abs(u_xlat16_0.xy) * _Sensitivity.yy;
					    u_xlat0.x = u_xlat0.y + u_xlat0.x;
					    u_xlat0.x = u_xlat0.x * _Sensitivity.y;
					    u_xlatb0.x = u_xlat0.x<0.100000001;
					    u_xlat16_3 = (-u_xlat16_6) + u_xlat16_9;
					    u_xlat6 = u_xlat16_9 * 0.0900000036;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb0.y = u_xlat3<u_xlat6;
					    u_xlati0.xy = ivec2((uvec2(u_xlatb0.xy) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati0.x = u_xlati0.y * u_xlati0.x;
					    u_xlat0.x = (u_xlati0.x != 0) ? 1.0 : 0.0;
					    u_xlat10_1 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD2.xy);
					    u_xlat16_3 = dot(u_xlat10_1.zw, vec2(1.0, 0.00392156886));
					    u_xlat10_2 = texture(_CameraDepthNormalsTexture, vs_TEXCOORD1.xy);
					    u_xlat16_6 = dot(u_xlat10_2.zw, vec2(1.0, 0.00392156886));
					    u_xlat16_1.xy = (-u_xlat10_1.xy) + u_xlat10_2.xy;
					    u_xlat1.xy = abs(u_xlat16_1.xy) * _Sensitivity.yy;
					    u_xlat9 = u_xlat1.y + u_xlat1.x;
					    u_xlat9 = u_xlat9 * _Sensitivity.y;
					    u_xlatb3.z = u_xlat9<0.100000001;
					    u_xlat16_3 = (-u_xlat16_3) + u_xlat16_6;
					    u_xlat6 = u_xlat16_6 * 0.0900000036;
					    u_xlat3 = abs(u_xlat16_3) * _Sensitivity.x;
					    u_xlatb3.x = u_xlat3<u_xlat6;
					    u_xlati3.xz = ivec2((uvec2(u_xlatb3.xz) * 0xFFFFFFFFu) & uvec2(1u, 1u));
					    u_xlati3.x = u_xlati3.x * u_xlati3.z;
					    u_xlat0.x = (u_xlati3.x != 0) ? u_xlat0.x : 0.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 156719
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD1.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BgColor;
					//   float _BgFade;
					//   sampler2D _CameraDepthTexture;
					//   float _Exponent;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _SampleDistance;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _BgColor            c2       1
					//   _BgFade             c3       1
					//   _SampleDistance     c4       1
					//   _Exponent           c5       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c6, -1, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    texld r0, v1, s1
					    mad r0.x, c0.x, r0.x, c0.y
					    mov r1.x, c4.x
					    mul r0.yz, r1.x, c1.xxyw
					    mad r1.yz, r0, -c6, v1.xxyw
					    texld r2, r1.yzzw, s1
					    mad r0.w, c0.x, r2.x, c0.y
					    rcp r2.y, r0.w
					    mad r1.yz, r0, c6, v1.xxyw
					    texld r3, r1.yzzw, s1
					    mad r0.w, c0.x, r3.x, c0.y
					    rcp r2.z, r0.w
					    mad r3, r0.yzyz, c6.xyzy, v1.xyxy
					    mad r4, r0.yzyz, -c6.xyzy, v1.xyxy
					    texld r5, r3.zwzw, s1
					    texld r3, r3, s1
					    mad r0.y, c0.x, r3.x, c0.y
					    rcp r3.y, r0.y
					    mad r0.y, c0.x, r5.x, c0.y
					    rcp r2.x, r0.y
					    texld r5, r4.zwzw, s1
					    texld r4, r4, s1
					    mad r0.y, c0.x, r4.x, c0.y
					    rcp r3.z, r0.y
					    mad r0.y, c0.x, r5.x, c0.y
					    rcp r2.w, r0.y
					    mul r2, r0.x, r2
					    rcp r0.x, r0.x
					    mul r4, r2, c6.zyxz
					    mul r2, r2, c6.yzzx
					    mad r0.yz, r1.x, c1.xxyw, v1.xxyw
					    texld r5, r0.yzzw, s1
					    mad r0.y, c0.x, r5.x, c0.y
					    rcp r3.x, r0.y
					    mad r0.yz, r1.x, -c1.xxyw, v1.xxyw
					    texld r1, r0.yzzw, s1
					    mad r0.y, c0.x, r1.x, c0.y
					    rcp r3.w, r0.y
					    add r0, -r0.x, r3
					    mad r1, r0, c6.xyxy, r4
					    mad r0, r0, c6.yyxx, r2
					    dp4 r0.x, r0, c6.y
					    dp4 r0.y, r1, c6.y
					    mul r0.y, r0.y, r0.y
					    mad r0.x, r0.x, r0.x, r0.y
					    rsq r0.x, r0.x
					    rcp_sat r0.x, r0.x
					    pow r1.x, r0.x, c5.x
					    add r0.x, -r1.x, c6.y
					    texld r1, v0, s0
					    add r2, -r1, c2
					    mad r1, c3.x, r2, r1
					    mul oC0, r0.x, r1
					
					// approximately 55 instruction slots used (10 texture, 45 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _BgColor;
						float _BgFade;
						float _SampleDistance;
						float _Exponent;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					vec4 u_xlat10_4;
					vec2 u_xlat5;
					float u_xlat15;
					void main()
					{
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlat5.xy = _MainTex_TexelSize.xy * vec2(vec2(_SampleDistance, _SampleDistance));
					    u_xlat1.xy = (-u_xlat5.xy) * vec2(1.0, 0.0) + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat1.xy);
					    u_xlat15 = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
					    u_xlat1.y = float(1.0) / u_xlat15;
					    u_xlat2.xy = u_xlat5.xy * vec2(1.0, 0.0) + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat2.xy);
					    u_xlat15 = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
					    u_xlat1.z = float(1.0) / u_xlat15;
					    u_xlat2 = u_xlat5.xyxy * vec4(-1.0, 1.0, 0.0, 1.0) + vs_TEXCOORD1.xyxy;
					    u_xlat3 = (-u_xlat5.xyxy) * vec4(-1.0, 1.0, 0.0, 1.0) + vs_TEXCOORD1.xyxy;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat2.zw);
					    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat2.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
					    u_xlat2.y = float(1.0) / u_xlat5.x;
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat5.x;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat3.zw);
					    u_xlat10_3 = texture(_CameraDepthTexture, u_xlat3.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_3.x + _ZBufferParams.y;
					    u_xlat2.z = float(1.0) / u_xlat5.x;
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat1.w = float(1.0) / u_xlat5.x;
					    u_xlat1 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat3 = u_xlat1 * vec4(0.0, 1.0, -1.0, 0.0);
					    u_xlat1 = u_xlat1 * vec4(1.0, 0.0, 0.0, -1.0);
					    u_xlat5.xy = vec2(vec2(_SampleDistance, _SampleDistance)) * _MainTex_TexelSize.xy + vs_TEXCOORD1.xy;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat2.x = float(1.0) / u_xlat5.x;
					    u_xlat5.xy = (-vec2(vec2(_SampleDistance, _SampleDistance))) * _MainTex_TexelSize.xy + vs_TEXCOORD1.xy;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat2.w = float(1.0) / u_xlat5.x;
					    u_xlat0 = (-u_xlat0.xxxx) + u_xlat2;
					    u_xlat2 = u_xlat0 * vec4(-1.0, 1.0, -1.0, 1.0) + u_xlat3;
					    u_xlat0 = u_xlat0 * vec4(1.0, 1.0, -1.0, -1.0) + u_xlat1;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Exponent;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 239745
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//
					
					    vs_3_0
					    def c5, 0, -2, 1, 0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.x, c5.x
					    slt r0.x, c4.y, r0.x
					    mad r0.y, v1.y, c5.y, c5.z
					    mad o2.y, r0.x, r0.y, v1.y
					    mov o1.xy, v1
					    mov o2.x, v1.x
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[6];
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					vec4 u_xlat0;
					bool u_xlatb0;
					float u_xlat1;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    u_xlatb0 = _MainTex_TexelSize.y<0.0;
					    u_xlat1 = (-in_TEXCOORD0.y) + 1.0;
					    vs_TEXCOORD1.y = (u_xlatb0) ? u_xlat1 : in_TEXCOORD0.y;
					    vs_TEXCOORD1.x = in_TEXCOORD0.x;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BgColor;
					//   float _BgFade;
					//   sampler2D _CameraDepthTexture;
					//   float _Exponent;
					//   sampler2D _MainTex;
					//   float4 _MainTex_TexelSize;
					//   float _SampleDistance;
					//   float4 _ZBufferParams;
					//
					//
					// Registers:
					//
					//   Name                Reg   Size
					//   ------------------- ----- ----
					//   _ZBufferParams      c0       1
					//   _MainTex_TexelSize  c1       1
					//   _BgColor            c2       1
					//   _BgFade             c3       1
					//   _SampleDistance     c4       1
					//   _Exponent           c5       1
					//   _MainTex            s0       1
					//   _CameraDepthTexture s1       1
					//
					
					    ps_3_0
					    def c6, -1, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_2d s0
					    dcl_2d s1
					    mov r0.x, c4.x
					    mul r0.yz, r0.x, c1.xxyw
					    mad r1.xy, r0.yzzw, -c6.yzzw, v1
					    texld r1, r1, s1
					    mad r0.w, c0.x, r1.x, c0.y
					    rcp r1.y, r0.w
					    mad r2.xy, r0.yzzw, c6.yzzw, v1
					    texld r2, r2, s1
					    mad r0.w, c0.x, r2.x, c0.y
					    rcp r1.z, r0.w
					    mad r2, r0.yzyz, c6.xyzy, v1.xyxy
					    mad r3, r0.yzyz, -c6.xyzy, v1.xyxy
					    texld r4, r2.zwzw, s1
					    texld r2, r2, s1
					    mad r0.y, c0.x, r2.x, c0.y
					    rcp r2.y, r0.y
					    mad r0.y, c0.x, r4.x, c0.y
					    rcp r1.x, r0.y
					    texld r4, r3.zwzw, s1
					    texld r3, r3, s1
					    mad r0.y, c0.x, r3.x, c0.y
					    rcp r2.z, r0.y
					    mad r0.y, c0.x, r4.x, c0.y
					    rcp r1.w, r0.y
					    texld r3, v1, s1
					    mad r0.y, c0.x, r3.x, c0.y
					    rcp r0.z, r0.y
					    max r3, r0.z, r1
					    mul r1, r0.y, r3
					    mul r3, r1, c6.zyxz
					    mul r1, r1, c6.yzzx
					    mad r0.yw, r0.x, c1.xxzy, v1.xxzy
					    texld r4, r0.ywzw, s1
					    mad r0.y, c0.x, r4.x, c0.y
					    rcp r2.x, r0.y
					    mad r0.xy, r0.x, -c1, v1
					    texld r4, r0, s1
					    mad r0.x, c0.x, r4.x, c0.y
					    rcp r2.w, r0.x
					    max r4, r0.z, r2
					    add r0, -r0.z, r4
					    mad r2, r0, c6.xyxy, r3
					    mad r0, r0, c6.yyxx, r1
					    dp4 r0.x, r0, c6.y
					    dp4 r0.y, r2, c6.y
					    mul r0.y, r0.y, r0.y
					    mad r0.x, r0.x, r0.x, r0.y
					    rsq r0.x, r0.x
					    rcp_sat r0.x, r0.x
					    pow r1.x, r0.x, c5.x
					    add r0.x, -r1.x, c6.y
					    texld r1, v0, s0
					    add r2, -r1, c2
					    mad r1, c3.x, r2, r1
					    mul oC0, r0.x, r1
					
					// approximately 57 instruction slots used (10 texture, 47 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[4];
						vec4 _BgColor;
						float _BgFade;
						float _SampleDistance;
						float _Exponent;
					};
					layout(std140) uniform UnityPerCamera {
						vec4 unused_1_0[7];
						vec4 _ZBufferParams;
						vec4 unused_1_2;
					};
					uniform  sampler2D _CameraDepthTexture;
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					layout(location = 0) out vec4 SV_Target0;
					vec4 u_xlat0;
					vec4 u_xlat10_0;
					vec4 u_xlat1;
					vec4 u_xlat10_1;
					vec4 u_xlat2;
					vec4 u_xlat10_2;
					vec4 u_xlat3;
					vec4 u_xlat10_3;
					bvec4 u_xlatb3;
					vec4 u_xlat10_4;
					bvec4 u_xlatb4;
					vec2 u_xlat5;
					vec2 u_xlat10;
					void main()
					{
					    u_xlat0.xy = _MainTex_TexelSize.xy * vec2(vec2(_SampleDistance, _SampleDistance));
					    u_xlat10.xy = (-u_xlat0.xy) * vec2(1.0, 0.0) + vs_TEXCOORD1.xy;
					    u_xlat10_1 = texture(_CameraDepthTexture, u_xlat10.xy);
					    u_xlat10.x = _ZBufferParams.x * u_xlat10_1.x + _ZBufferParams.y;
					    u_xlat1.y = float(1.0) / u_xlat10.x;
					    u_xlat10.xy = u_xlat0.xy * vec2(1.0, 0.0) + vs_TEXCOORD1.xy;
					    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat10.xy);
					    u_xlat10.x = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
					    u_xlat1.z = float(1.0) / u_xlat10.x;
					    u_xlat2 = u_xlat0.xyxy * vec4(-1.0, 1.0, 0.0, 1.0) + vs_TEXCOORD1.xyxy;
					    u_xlat0 = (-u_xlat0.xyxy) * vec4(-1.0, 1.0, 0.0, 1.0) + vs_TEXCOORD1.xyxy;
					    u_xlat10_3 = texture(_CameraDepthTexture, u_xlat2.zw);
					    u_xlat10_2 = texture(_CameraDepthTexture, u_xlat2.xy);
					    u_xlat2.x = _ZBufferParams.x * u_xlat10_2.x + _ZBufferParams.y;
					    u_xlat2.y = float(1.0) / u_xlat2.x;
					    u_xlat3.x = _ZBufferParams.x * u_xlat10_3.x + _ZBufferParams.y;
					    u_xlat1.x = float(1.0) / u_xlat3.x;
					    u_xlat10_3 = texture(_CameraDepthTexture, u_xlat0.zw);
					    u_xlat10_0 = texture(_CameraDepthTexture, u_xlat0.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
					    u_xlat2.z = float(1.0) / u_xlat0.x;
					    u_xlat0.x = _ZBufferParams.x * u_xlat10_3.x + _ZBufferParams.y;
					    u_xlat1.w = float(1.0) / u_xlat0.x;
					    u_xlat10_0 = texture(_CameraDepthTexture, vs_TEXCOORD1.xy);
					    u_xlat0.x = _ZBufferParams.x * u_xlat10_0.x + _ZBufferParams.y;
					    u_xlat0.x = float(1.0) / u_xlat0.x;
					    u_xlatb3 = lessThan(u_xlat0.xxxx, u_xlat1);
					    {
					        vec4 hlslcc_movcTemp = u_xlat1;
					        hlslcc_movcTemp.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
					        hlslcc_movcTemp.y = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
					        hlslcc_movcTemp.z = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
					        hlslcc_movcTemp.w = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
					        u_xlat1 = hlslcc_movcTemp;
					    }
					    u_xlat1 = u_xlat1 / u_xlat0.xxxx;
					    u_xlat3 = u_xlat1 * vec4(0.0, 1.0, -1.0, 0.0);
					    u_xlat1 = u_xlat1 * vec4(1.0, 0.0, 0.0, -1.0);
					    u_xlat5.xy = vec2(vec2(_SampleDistance, _SampleDistance)) * _MainTex_TexelSize.xy + vs_TEXCOORD1.xy;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat2.x = float(1.0) / u_xlat5.x;
					    u_xlat5.xy = (-vec2(vec2(_SampleDistance, _SampleDistance))) * _MainTex_TexelSize.xy + vs_TEXCOORD1.xy;
					    u_xlat10_4 = texture(_CameraDepthTexture, u_xlat5.xy);
					    u_xlat5.x = _ZBufferParams.x * u_xlat10_4.x + _ZBufferParams.y;
					    u_xlat2.w = float(1.0) / u_xlat5.x;
					    u_xlatb4 = lessThan(u_xlat0.xxxx, u_xlat2);
					    {
					        vec4 hlslcc_movcTemp = u_xlat2;
					        hlslcc_movcTemp.x = (u_xlatb4.x) ? u_xlat2.x : u_xlat0.x;
					        hlslcc_movcTemp.y = (u_xlatb4.y) ? u_xlat2.y : u_xlat0.x;
					        hlslcc_movcTemp.z = (u_xlatb4.z) ? u_xlat2.z : u_xlat0.x;
					        hlslcc_movcTemp.w = (u_xlatb4.w) ? u_xlat2.w : u_xlat0.x;
					        u_xlat2 = hlslcc_movcTemp;
					    }
					    u_xlat0 = (-u_xlat0.xxxx) + u_xlat2;
					    u_xlat2 = u_xlat0 * vec4(-1.0, 1.0, -1.0, 1.0) + u_xlat3;
					    u_xlat0 = u_xlat0 * vec4(1.0, 1.0, -1.0, -1.0) + u_xlat1;
					    u_xlat0.x = dot(u_xlat0, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = dot(u_xlat2, vec4(1.0, 1.0, 1.0, 1.0));
					    u_xlat5.x = u_xlat5.x * u_xlat5.x;
					    u_xlat0.x = u_xlat0.x * u_xlat0.x + u_xlat5.x;
					    u_xlat0.x = sqrt(u_xlat0.x);
					    u_xlat0.x = min(u_xlat0.x, 1.0);
					    u_xlat0.x = log2(u_xlat0.x);
					    u_xlat0.x = u_xlat0.x * _Exponent;
					    u_xlat0.x = exp2(u_xlat0.x);
					    u_xlat0.x = (-u_xlat0.x) + 1.0;
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat2 = (-u_xlat10_1) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat2 + u_xlat10_1;
					    SV_Target0 = u_xlat0.xxxx * u_xlat1;
					    return;
					}"
				}
			}
		}
		Pass {
			ZClip Off
			ZTest Always
			ZWrite Off
			Cull Off
			GpuProgramID 291053
			Program "vp" {
				SubProgram "d3d9 " {
					"!!vs_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _MainTex_TexelSize;
					//   float _SampleDistance;
					//   row_major float4x4 glstate_matrix_mvp;
					//
					//
					// Registers:
					//
					//   Name               Reg   Size
					//   ------------------ ----- ----
					//   glstate_matrix_mvp c0       4
					//   _MainTex_TexelSize c4       1
					//   _SampleDistance    c5       1
					//
					
					    vs_3_0
					    dcl_position v0
					    dcl_texcoord v1
					    dcl_position o0
					    dcl_texcoord o1.xy
					    dcl_texcoord1 o2.xy
					    dcl_texcoord2 o3.xy
					    dp4 r1.x, c0, v0
					    dp4 r1.y, c1, v0
					    dp4 r1.z, c2, v0
					    dp4 r1.w, c3, v0
					    mov r0.xy, c4
					    mad o2.xy, -r0, c5.x, v1
					    mul r0.w, -r0.y, c5.x
					    mul r0.z, r0.x, c5.x
					    add o3.xy, r0.zwzw, v1
					    mov o1.xy, v1
					    mad o0.xy, r1.w, c255, r1
					    mov o0.zw, r1
					
					// approximately 12 instruction slots used"
				}
				SubProgram "d3d11 " {
					"!!vs_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform VGlobals {
						vec4 unused_0_0[2];
						vec4 _MainTex_TexelSize;
						vec4 unused_0_2[5];
						float _SampleDistance;
					};
					layout(std140) uniform UnityPerDraw {
						mat4x4 glstate_matrix_mvp;
						vec4 unused_1_1[18];
					};
					in  vec4 in_POSITION0;
					in  vec2 in_TEXCOORD0;
					out vec2 vs_TEXCOORD0;
					out vec2 vs_TEXCOORD1;
					out vec2 vs_TEXCOORD2;
					vec4 u_xlat0;
					vec2 u_xlat2;
					void main()
					{
					    u_xlat0 = in_POSITION0.yyyy * glstate_matrix_mvp[1];
					    u_xlat0 = glstate_matrix_mvp[0] * in_POSITION0.xxxx + u_xlat0;
					    u_xlat0 = glstate_matrix_mvp[2] * in_POSITION0.zzzz + u_xlat0;
					    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + u_xlat0;
					    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
					    vs_TEXCOORD1.xy = (-_MainTex_TexelSize.xy) * vec2(vec2(_SampleDistance, _SampleDistance)) + in_TEXCOORD0.xy;
					    u_xlat2.y = (-_MainTex_TexelSize.y) * _SampleDistance;
					    u_xlat2.x = _MainTex_TexelSize.x * _SampleDistance;
					    vs_TEXCOORD2.xy = u_xlat2.xy + in_TEXCOORD0.xy;
					    return;
					}"
				}
			}
			Program "fp" {
				SubProgram "d3d9 " {
					"!!ps_3_0
					
					//
					// Generated by Microsoft (R) HLSL Shader Compiler 10.1
					//
					// Parameters:
					//
					//   float4 _BgColor;
					//   float _BgFade;
					//   sampler2D _MainTex;
					//   float _Threshold;
					//
					//
					// Registers:
					//
					//   Name         Reg   Size
					//   ------------ ----- ----
					//   _BgColor     c0       1
					//   _BgFade      c1       1
					//   _Threshold   c2       1
					//   _MainTex     s0       1
					//
					
					    ps_3_0
					    def c3, 2, 1, 0, 0
					    dcl_texcoord v0.xy
					    dcl_texcoord1 v1.xy
					    dcl_texcoord2 v2.xy
					    dcl_2d s0
					    texld_pp r0, v2, s0
					    texld_pp r1, v1, s0
					    texld_pp r2, v0, s0
					    mad_pp r1.xyz, r2, c3.x, -r1
					    add_pp r0.xyz, -r0, r1
					    dp3_pp r0.x, r0, r0
					    add r0.x, -r0.x, c2.x
					    cmp_pp r0.x, r0.x, c3.y, c3.z
					    add_pp r1, -r2, c0
					    mad_pp r1, c1.x, r1, r2
					    mul_pp oC0, r0.x, r1
					
					// approximately 11 instruction slots used (3 texture, 8 arithmetic)"
				}
				SubProgram "d3d11 " {
					"!!ps_4_0
					
					#version 330
					#extension GL_ARB_explicit_attrib_location : require
					#extension GL_ARB_explicit_uniform_location : require
					
					layout(std140) uniform PGlobals {
						vec4 unused_0_0[7];
						vec4 _BgColor;
						float _BgFade;
						float _Threshold;
					};
					uniform  sampler2D _MainTex;
					in  vec2 vs_TEXCOORD0;
					in  vec2 vs_TEXCOORD1;
					in  vec2 vs_TEXCOORD2;
					layout(location = 0) out vec4 SV_Target0;
					float u_xlat0;
					vec3 u_xlat16_0;
					vec4 u_xlat10_0;
					bool u_xlatb0;
					vec4 u_xlat1;
					vec3 u_xlat16_1;
					vec4 u_xlat10_1;
					vec4 u_xlat10_2;
					void main()
					{
					    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
					    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD1.xy);
					    u_xlat10_2 = texture(_MainTex, vs_TEXCOORD0.xy);
					    u_xlat16_1.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + (-u_xlat10_1.xyz);
					    u_xlat16_0.xyz = (-u_xlat10_0.xyz) + u_xlat16_1.xyz;
					    u_xlat0 = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);
					    u_xlatb0 = _Threshold>=u_xlat0;
					    u_xlat0 = u_xlatb0 ? 1.0 : float(0.0);
					    u_xlat1 = (-u_xlat10_2) + _BgColor;
					    u_xlat1 = vec4(_BgFade) * u_xlat1 + u_xlat10_2;
					    SV_Target0 = vec4(u_xlat0) * u_xlat1;
					    return;
					}"
				}
			}
		}
	}
}